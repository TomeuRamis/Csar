
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Feb 08 10:45:22 CET 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Feb 08 10:45:22 CET 2020
  */
public class Cooper extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Cooper() {super();}

  /** Constructor which sets the default scanner. */
  public Cooper(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Cooper(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\005\005\000\002\005\003" +
    "\000\002\010\004\000\002\010\003\000\002\011\003\000" +
    "\002\015\004\000\002\015\003\000\002\030\004\000\002" +
    "\030\003\000\002\031\004\000\002\031\003\000\002\031" +
    "\004\000\002\031\003\000\002\031\004\000\002\031\004" +
    "\000\002\031\004\000\002\031\004\000\002\031\004\000" +
    "\002\032\005\000\002\033\004\000\002\034\007\000\002" +
    "\035\004\000\002\036\005\000\002\037\004\000\002\040" +
    "\007\000\002\041\005\000\002\042\004\000\002\042\004" +
    "\000\002\042\003\000\002\043\004\000\002\044\004\000" +
    "\002\045\006\000\002\045\006\000\002\024\006\000\002" +
    "\024\005\000\002\046\004\000\002\023\004\000\002\023" +
    "\003\000\002\020\004\000\002\021\010\000\002\022\004" +
    "\000\002\017\004\000\002\017\004\000\002\026\004\000" +
    "\002\026\003\000\002\027\005\000\002\027\003\000\002" +
    "\025\004\000\002\013\005\000\002\013\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\014\005\000" +
    "\002\014\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\012\004\006\017\005\023\uffc0\024\uffc0\001" +
    "\002\000\024\003\062\004\006\005\063\014\066\020\060" +
    "\021\056\022\046\025\061\034\uffc0\001\002\000\004\004" +
    "\006\001\002\000\004\005\ufff9\001\002\000\004\030\ufffa" +
    "\001\002\000\004\002\175\001\002\000\006\023\ufffc\024" +
    "\ufffc\001\002\000\004\005\170\001\002\000\006\023\uffc0" +
    "\024\024\001\002\000\004\030\015\001\002\000\012\004" +
    "\006\017\005\023\uffc0\024\uffc0\001\002\000\006\023\ufffd" +
    "\024\ufffd\001\002\000\006\023\uffc0\024\024\001\002\000" +
    "\004\023\uffd8\001\002\000\004\023\165\001\002\000\024" +
    "\003\062\004\006\005\063\014\066\020\060\021\056\022" +
    "\046\025\061\034\uffc0\001\002\000\004\005\027\001\002" +
    "\000\006\004\006\027\025\001\002\000\004\005\uffd3\001" +
    "\002\000\004\005\uffd4\001\002\000\004\031\030\001\002" +
    "\000\006\004\006\032\uffc0\001\002\000\004\032\uffd1\001" +
    "\002\000\004\032\043\001\002\000\006\026\037\032\uffc0" +
    "\001\002\000\004\005\035\001\002\000\006\026\uffce\032" +
    "\uffce\001\002\000\004\032\uffcf\001\002\000\004\004\006" +
    "\001\002\000\004\032\uffd2\001\002\000\006\026\037\032" +
    "\uffc0\001\002\000\004\032\uffd0\001\002\000\004\033\044" +
    "\001\002\000\024\003\uffd6\004\uffd6\005\uffd6\014\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\025\uffd6\034\uffd6\001\002\000\024" +
    "\003\ufff3\004\ufff3\005\ufff3\014\ufff3\020\ufff3\021\ufff3\022" +
    "\ufff3\025\ufff3\034\ufff3\001\002\000\004\031\162\001\002" +
    "\000\004\030\161\001\002\000\004\030\160\001\002\000" +
    "\024\003\ufff1\004\ufff1\005\ufff1\014\ufff1\020\ufff1\021\ufff1" +
    "\022\ufff1\025\ufff1\034\ufff1\001\002\000\004\030\157\001" +
    "\002\000\024\003\062\004\006\005\063\014\066\020\060" +
    "\021\056\022\046\025\061\034\uffc0\001\002\000\004\034" +
    "\142\001\002\000\024\003\062\004\006\005\063\014\066" +
    "\020\060\021\056\022\046\025\061\034\uffc0\001\002\000" +
    "\004\031\136\001\002\000\024\003\062\004\006\005\063" +
    "\014\066\020\060\021\056\022\046\025\061\034\uffc0\001" +
    "\002\000\004\031\127\001\002\000\012\005\076\006\074" +
    "\007\101\010\077\001\002\000\006\030\125\034\124\001" +
    "\002\000\006\015\122\031\103\001\002\000\006\023\uffd7" +
    "\024\uffd7\001\002\000\004\030\121\001\002\000\004\031" +
    "\072\001\002\000\004\030\071\001\002\000\004\034\ufff5" +
    "\001\002\000\024\003\ufff4\004\ufff4\005\ufff4\014\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\025\ufff4\034\ufff4\001\002\000\012" +
    "\005\076\006\074\007\101\010\077\001\002\000\016\011" +
    "\uffc9\012\uffc9\013\uffc9\026\uffc9\030\uffc9\032\uffc9\001\002" +
    "\000\016\011\uffc6\012\uffc6\013\uffc6\026\uffc6\030\uffc6\032" +
    "\uffc6\001\002\000\012\011\112\012\107\013\111\032\117" +
    "\001\002\000\020\011\uffca\012\uffca\013\uffca\026\uffca\030" +
    "\uffca\031\103\032\uffca\001\002\000\016\011\uffc7\012\uffc7" +
    "\013\uffc7\026\uffc7\030\uffc7\032\uffc7\001\002\000\016\011" +
    "\uffcc\012\uffcc\013\uffcc\026\uffcc\030\uffcc\032\uffcc\001\002" +
    "\000\016\011\uffc8\012\uffc8\013\uffc8\026\uffc8\030\uffc8\032" +
    "\uffc8\001\002\000\016\011\uffcb\012\uffcb\013\uffcb\026\uffcb" +
    "\030\uffcb\032\uffcb\001\002\000\014\005\076\006\074\007" +
    "\101\010\077\032\104\001\002\000\016\011\uffdb\012\uffdb" +
    "\013\uffdb\026\uffdb\030\uffdb\032\uffdb\001\002\000\004\032" +
    "\116\001\002\000\014\011\112\012\107\013\111\026\110" +
    "\032\uffc4\001\002\000\012\005\uffc1\006\uffc1\007\uffc1\010" +
    "\uffc1\001\002\000\012\005\076\006\074\007\101\010\077" +
    "\001\002\000\012\005\uffc2\006\uffc2\007\uffc2\010\uffc2\001" +
    "\002\000\012\005\uffc3\006\uffc3\007\uffc3\010\uffc3\001\002" +
    "\000\012\005\076\006\074\007\101\010\077\001\002\000" +
    "\016\011\uffcd\012\uffcd\013\uffcd\026\uffcd\030\uffcd\032\uffcd" +
    "\001\002\000\004\032\uffc5\001\002\000\016\011\uffdc\012" +
    "\uffdc\013\uffdc\026\uffdc\030\uffdc\032\uffdc\001\002\000\004" +
    "\033\120\001\002\000\024\003\uffe9\004\uffe9\005\uffe9\014" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\025\uffe9\034\uffe9\001\002" +
    "\000\024\003\ufff2\004\ufff2\005\ufff2\014\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\025\ufff2\034\ufff2\001\002\000\012\005\076" +
    "\006\074\007\101\010\077\001\002\000\012\011\112\012" +
    "\107\013\111\030\uffeb\001\002\000\024\003\uffec\004\uffec" +
    "\005\uffec\014\uffec\020\uffec\021\uffec\022\uffec\025\uffec\034" +
    "\uffec\001\002\000\024\003\uffed\004\uffed\005\uffed\014\uffed" +
    "\020\uffed\021\uffed\022\uffed\025\uffed\034\uffed\001\002\000" +
    "\012\011\112\012\107\013\111\030\uffda\001\002\000\012" +
    "\005\076\006\074\007\101\010\077\001\002\000\012\011" +
    "\112\012\107\013\111\032\131\001\002\000\004\033\132" +
    "\001\002\000\024\003\uffe5\004\uffe5\005\uffe5\014\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\025\uffe5\034\uffe5\001\002\000\004" +
    "\034\135\001\002\000\024\003\uffea\004\uffea\005\uffea\014" +
    "\uffea\020\uffea\021\uffea\022\uffea\025\uffea\034\uffea\001\002" +
    "\000\024\003\uffe8\004\uffe8\005\uffe8\014\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\025\uffe8\034\uffe8\001\002\000\004\005\137" +
    "\001\002\000\004\032\140\001\002\000\004\030\uffde\001" +
    "\002\000\004\034\ufff6\001\002\000\006\023\uffd5\024\uffd5" +
    "\001\002\000\024\003\uffe6\004\uffe6\005\uffe6\014\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\025\uffe6\034\uffe6\001\002\000\004" +
    "\034\145\001\002\000\026\003\uffc0\004\uffc0\005\uffc0\014" +
    "\uffc0\016\151\020\uffc0\021\uffc0\022\uffc0\025\uffc0\034\uffc0" +
    "\001\002\000\024\003\062\004\006\005\063\014\066\020" +
    "\060\021\056\022\046\025\061\034\uffc0\001\002\000\024" +
    "\003\uffe1\004\uffe1\005\uffe1\014\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\025\uffe1\034\uffe1\001\002\000\024\003\uffe4\004\uffe4" +
    "\005\uffe4\014\uffe4\020\uffe4\021\uffe4\022\uffe4\025\uffe4\034" +
    "\uffe4\001\002\000\006\020\060\033\153\001\002\000\024" +
    "\003\uffe3\004\uffe3\005\uffe3\014\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\025\uffe3\034\uffe3\001\002\000\024\003\uffe0\004\uffe0" +
    "\005\uffe0\014\uffe0\020\uffe0\021\uffe0\022\uffe0\025\uffe0\034" +
    "\uffe0\001\002\000\004\034\156\001\002\000\024\003\uffe2" +
    "\004\uffe2\005\uffe2\014\uffe2\020\uffe2\021\uffe2\022\uffe2\025" +
    "\uffe2\034\uffe2\001\002\000\024\003\uffdf\004\uffdf\005\uffdf" +
    "\014\uffdf\020\uffdf\021\uffdf\022\uffdf\025\uffdf\034\uffdf\001" +
    "\002\000\024\003\uffef\004\uffef\005\uffef\014\uffef\020\uffef" +
    "\021\uffef\022\uffef\025\uffef\034\uffef\001\002\000\024\003" +
    "\ufff0\004\ufff0\005\ufff0\014\ufff0\020\ufff0\021\ufff0\022\ufff0" +
    "\025\ufff0\034\ufff0\001\002\000\024\003\uffee\004\uffee\005" +
    "\uffee\014\uffee\020\uffee\021\uffee\022\uffee\025\uffee\034\uffee" +
    "\001\002\000\012\005\076\006\074\007\101\010\077\001" +
    "\002\000\012\011\112\012\107\013\111\032\164\001\002" +
    "\000\004\030\uffdd\001\002\000\004\033\166\001\002\000" +
    "\024\003\uffff\004\uffff\005\uffff\014\uffff\020\uffff\021\uffff" +
    "\022\uffff\025\uffff\034\uffff\001\002\000\004\023\uffd9\001" +
    "\002\000\006\015\173\030\uffc0\001\002\000\004\030\ufff7" +
    "\001\002\000\004\030\uffe7\001\002\000\012\005\076\006" +
    "\074\007\101\010\077\001\002\000\012\011\112\012\107" +
    "\013\111\030\ufff8\001\002\000\004\002\001\001\002\000" +
    "\004\030\ufffb\001\002\000\004\002\000\001\002\000\004" +
    "\034\201\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\020\002\007\003\003\005\012\007\010\010" +
    "\013\011\011\036\006\001\001\000\036\004\176\007\067" +
    "\011\011\024\051\030\177\031\054\032\066\033\044\034" +
    "\056\036\064\037\050\040\052\045\047\046\046\001\001" +
    "\000\006\011\011\036\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\017\017\022\020\016\021\021\023" +
    "\020\001\001\000\002\001\001\000\014\005\015\007\010" +
    "\010\013\011\011\036\006\001\001\000\002\001\001\000" +
    "\014\007\017\017\022\020\016\021\021\023\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\007\067\011" +
    "\011\022\063\024\051\030\053\031\054\032\066\033\044" +
    "\034\056\036\064\037\050\040\052\045\047\046\046\001" +
    "\001\000\002\001\001\000\004\011\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\030\011\033\025\032\026\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\035\027\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\033\025\040\001\001\000\002\001\001\000\006\007" +
    "\035\027\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\007\067\011\011\024\051\030\143\031" +
    "\054\032\066\033\044\034\056\036\064\037\050\040\052" +
    "\041\142\045\047\046\046\001\001\000\002\001\001\000" +
    "\034\007\067\011\011\024\051\030\140\031\054\032\066" +
    "\033\044\034\056\036\064\037\050\040\052\045\047\046" +
    "\046\001\001\000\002\001\001\000\036\007\067\011\011" +
    "\024\051\030\132\031\054\032\066\033\044\034\056\035" +
    "\133\036\064\037\050\040\052\045\047\046\046\001\001" +
    "\000\002\001\001\000\012\012\077\013\125\016\072\024" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\077" +
    "\013\074\016\072\024\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\077\013\105\014\104\016\072" +
    "\024\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\112\001\001\000\002\001\001\000\014\012\077" +
    "\013\105\014\114\016\072\024\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\113\016\072\024\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\077\013\122\016\072\024\101\001\001\000" +
    "\004\006\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\112\001\001\000\012\012\077\013\127\016" +
    "\072\024\101\001\001\000\004\006\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\146\042\147" +
    "\043\145\001\001\000\036\007\067\011\011\024\051\030" +
    "\153\031\054\032\066\033\044\034\056\036\064\037\050" +
    "\040\052\044\154\045\047\046\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\037\151\040\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\077\013\162\016" +
    "\072\024\101\001\001\000\004\006\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\170\015\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\077\013\173\016\072\024" +
    "\101\001\001\000\004\006\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Cooper$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Cooper$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Cooper$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    
    


    }


    private Symbol s;
    public void syntax_error(Symbol s){
        FrmPrincipal.notificarError("Error sintactico: "+s.value+" en linea: "+(s.left+1)+" y columna: "+(s.right+1));
        this.s = s;
    }
    public Symbol getS(){
        return s;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        //FrmPrincipal.notificarError("Error sintactico: "+s.value+" en linea: "+(s.left+1)+" y columna: "+(s.right+1)+" No se pudo recuperar");
        FrmPrincipal.notificarError("No se pudo recuperar el error");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Cooper$actions {


    TablaSimbolos ts = new TablaSimbolos();

  private final Cooper parser;

  /** Constructor */
  CUP$Cooper$actions(Cooper parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Cooper$do_action(
    int                        CUP$Cooper$act_num,
    java_cup.runtime.lr_parser CUP$Cooper$parser,
    java.util.Stack            CUP$Cooper$stack,
    int                        CUP$Cooper$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Cooper$result;

      /* select the action based on the action number */
      switch (CUP$Cooper$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LAMBDA ::= 
            {
              Symbols.LAMBDA RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("LAMBDA",5, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERADOR ::= Op_logico 
            {
              Symbols.OPERADOR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.OPERADOR(v,3); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("OPERADOR",4, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERADOR ::= Op_relacional 
            {
              Symbols.OPERADOR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.OPERADOR(v,2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("OPERADOR",4, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERADOR ::= Op_aritmetico 
            {
              Symbols.OPERADOR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.OPERADOR(v,1); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("OPERADOR",4, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRS ::= EXPRP 
            {
              Symbols.EXPRS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPRS(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPRS",10, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRS ::= EXPRP Coma EXPRS 
            {
              Symbols.EXPRS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.EXPRP v1 = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPRS v2 = (Symbols.EXPRS)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPRS(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPRS",10, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LITERAL ::= Numero 
            {
              Symbols.LITERAL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.LITERAL(codigo.TablaSimbolos.Tipo.tInt, v);  
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("LITERAL",12, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LITERAL ::= String 
            {
              Symbols.LITERAL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.LITERAL(codigo.TablaSimbolos.Tipo.tString, v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("LITERAL",12, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LITERAL ::= Op_booleano 
            {
              Symbols.LITERAL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.LITERAL(codigo.TablaSimbolos.Tipo.tBool,v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("LITERAL",12, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPR ::= LITERAL 
            {
              Symbols.EXPR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.LITERAL v = (Symbols.LITERAL)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPR(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPR",8, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPR ::= Id 
            {
              Symbols.EXPR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPR(v, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPR",8, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPR ::= CALL 
            {
              Symbols.EXPR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.CALL v = (Symbols.CALL)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPR(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPR",8, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRP ::= EXPR 
            {
              Symbols.EXPRP RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPR v = (Symbols.EXPR)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPRP(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPRP",9, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRP ::= EXPRP OPERADOR EXPR 
            {
              Symbols.EXPRP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.EXPRP v1 = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.OPERADOR v2 = (Symbols.OPERADOR)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPR v3 = (Symbols.EXPR)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPRP(v1,v2,v3); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPRP",9, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PARAM ::= TYPE Id 
            {
              Symbols.PARAM RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.TYPE v1 = (Symbols.TYPE)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.PARAM(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAM",19, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PARAMSP ::= LAMBDA 
            {
              Symbols.PARAMSP RESULT =null;
		 RESULT = new Symbols.PARAMSP(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAMSP",21, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PARAMSP ::= Coma PARAM PARAMSP 
            {
              Symbols.PARAMSP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.PARAM v1 = (Symbols.PARAM)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.PARAMSP v2 = (Symbols.PARAMSP)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.PARAMSP(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAMSP",21, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PARAMS ::= LAMBDA 
            {
              Symbols.PARAMS RESULT =null;
		 RESULT = new Symbols.PARAMS(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAMS",20, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARAMS ::= PARAM PARAMSP 
            {
              Symbols.PARAMS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.PARAM v1 = (Symbols.PARAM)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.PARAMSP v2 = (Symbols.PARAMSP)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.PARAMS(v1,v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAMS",20, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DEFINICION ::= Def Void 
            {
              Symbols.DEFINICION RESULT =null;
		 RESULT = new Symbols.DEFINICION(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DEFINICION",13, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DEFINICION ::= Def TYPE 
            {
              Symbols.DEFINICION RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.TYPE v = (Symbols.TYPE)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.DEFINICION(v);  
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DEFINICION",13, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FUNC2 ::= INSTS C_llave 
            {
              Symbols.FUNC2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.INSTS v = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.FUNC2(v,ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("FUNC2",16, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FUNC1 ::= DEFINICION Id A_par PARAMS C_par A_llave 
            {
              Symbols.FUNC1 RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)).right;
		Symbols.DEFINICION v1 = (Symbols.DEFINICION)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-4)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.PARAMS v3 = (Symbols.PARAMS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		 RESULT = new Symbols.FUNC1(v1, v2, v3, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("FUNC1",15, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUNC ::= FUNC1 FUNC2 
            {
              Symbols.FUNC RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.FUNC1 v1 = (Symbols.FUNC1)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.FUNC2 v2 = (Symbols.FUNC2)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.FUNC(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("FUNC",14, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUNCS ::= LAMBDA 
            {
              Symbols.FUNCS RESULT =null;
		 RESULT = new Symbols.FUNCS(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("FUNCS",17, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNCS ::= FUNC FUNCS 
            {
              Symbols.FUNCS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.FUNC v1 = (Symbols.FUNC)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.FUNCS v2 = (Symbols.FUNCS)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.FUNCS(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("FUNCS",17, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RET ::= Return EXPRP 
            {
              Symbols.RET RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.RET(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("RET",36, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CALL ::= Id A_par C_par 
            {
              Symbols.CALL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		 RESULT = new Symbols.CALL(v, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("CALL",18, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CALL ::= Id A_par EXPRS C_par 
            {
              Symbols.CALL RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.EXPRS v2 = (Symbols.EXPRS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.CALL(v1, v2, ts);  
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("CALL",18, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IO ::= Out A_par EXPRP C_par 
            {
              Symbols.IO RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.IO(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("IO",35, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IO ::= In A_par Id C_par 
            {
              Symbols.IO RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.IO(v, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("IO",35, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ELS2 ::= INSTS C_llave 
            {
              Symbols.ELS2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.INSTS v = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.ELS2(v, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ELS2",34, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ELS1 ::= Else A_llave 
            {
              Symbols.ELS1 RESULT =null;
		 RESULT = new Symbols.ELS1(ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ELS1",33, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ELS ::= LAMBDA 
            {
              Symbols.ELS RESULT =null;
		 RESULT = new Symbols.ELS(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ELS",32, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ELS ::= ELS1 ELS2 
            {
              Symbols.ELS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.ELS1 v1 = (Symbols.ELS1)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.ELS2 v2 = (Symbols.ELS2)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.ELS(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ELS",32, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ELS ::= Else CND 
            {
              Symbols.ELS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.CND v = (Symbols.CND)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.ELS(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ELS",32, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CND2 ::= INSTS C_llave ELS 
            {
              Symbols.CND2 RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.INSTS v1 = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.ELS v2 = (Symbols.ELS)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.CND2(v1, v2, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("CND2",31, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CND1 ::= If A_par EXPRP C_par A_llave 
            {
              Symbols.CND1 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		 RESULT = new Symbols.CND1(v, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("CND1",30, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-4)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CND ::= CND1 CND2 
            {
              Symbols.CND RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.CND1 v1 = (Symbols.CND1)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.CND2 v2 = (Symbols.CND2)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.CND(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("CND",29, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DCL ::= TYPE Id ASIGNACION 
            {
              Symbols.DCL RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.TYPE v1 = (Symbols.TYPE)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.ASIGNACION v3 = (Symbols.ASIGNACION)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.DCL(v1,v2, v3, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DCL",28, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // WHL2 ::= INSTS C_llave 
            {
              Symbols.WHL2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.INSTS v = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.WHL2(v, ts);  
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("WHL2",27, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // WHL1 ::= While A_par EXPRP C_par A_llave 
            {
              Symbols.WHL1 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		 RESULT = new Symbols.WHL1(v, ts);  
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("WHL1",26, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-4)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // WHL ::= WHL1 WHL2 
            {
              Symbols.WHL RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.WHL1 v1 = (Symbols.WHL1)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.WHL2 v2 = (Symbols.WHL2)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.WHL(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("WHL",25, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIG ::= Id Igual EXPRP 
            {
              Symbols.ASIG RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPRP v2 = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.ASIG(v1,v2,ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ASIG",24, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INST ::= error C_llave 
            {
              Symbols.INST RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INST ::= error PuntoYComa 
            {
              Symbols.INST RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INST ::= RET PuntoYComa 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.RET v = (Symbols.RET)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.INST(v,true); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INST ::= CALL PuntoYComa 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.CALL v = (Symbols.CALL)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.INST(v,true); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INST ::= IO PuntoYComa 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.IO v = (Symbols.IO)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.INST(v,true); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INST ::= CND 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.CND v = (Symbols.CND)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.INST(v,false); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INST ::= DCL PuntoYComa 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.DCL v = (Symbols.DCL)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.INST(v,true); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INST ::= WHL 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.WHL v = (Symbols.WHL)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.INST(v,false); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INST ::= ASIG PuntoYComa 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.ASIG v = (Symbols.ASIG)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.INST(v,true); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTS ::= LAMBDA 
            {
              Symbols.INSTS RESULT =null;
		 RESULT = new Symbols.INSTS(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INSTS",22, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTS ::= INST INSTS 
            {
              Symbols.INSTS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.INST v1 = (Symbols.INST)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.INSTS v2 = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.INSTS(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INSTS",22, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ASIGNACION ::= LAMBDA 
            {
              Symbols.ASIGNACION RESULT =null;
		 RESULT = new Symbols.ASIGNACION(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ASIGNACION ::= Igual EXPRP 
            {
              Symbols.ASIGNACION RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.ASIGNACION(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TYPE ::= Tipo 
            {
              Symbols.TYPE RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.TYPE(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("TYPE",7, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECL ::= DCL 
            {
              Symbols.DECL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.DCL v = (Symbols.DCL)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.DECL(v,false,null); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DECL",6, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECL ::= Const DCL 
            {
              Symbols.DECL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.DCL v = (Symbols.DCL)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.DECL(v, true, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DECL",6, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLS ::= LAMBDA 
            {
              Symbols.DECLS RESULT =null;
		 RESULT = new Symbols.DECLS(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DECLS",3, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLS ::= DECL PuntoYComa DECLS 
            {
              Symbols.DECLS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.DECL v1 = (Symbols.DECL)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.DECLS v2 = (Symbols.DECLS)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.DECLS(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DECLS",3, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // P2 ::= INSTS C_llave 
            {
              Symbols.P2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.INSTS v = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.P2(v, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("P2",2, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P1 ::= DECLS FUNCS Main A_llave 
            {
              Symbols.P1 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)).right;
		Symbols.DECLS v = (Symbols.DECLS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.FUNCS v2 = (Symbols.FUNCS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		 RESULT = new Symbols.P1(v,v2, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("P1",1, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // P ::= P1 P2 
            {
              Symbols.P RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.P1 v1 = (Symbols.P1)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.P2 v2 = (Symbols.P2)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.P(v1, v2,ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("P",0, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= P EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.P start_val = (Symbols.P)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		RESULT = start_val;
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Cooper$parser.done_parsing();
          return CUP$Cooper$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

