
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 07 18:48:28 CET 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 07 18:48:28 CET 2020
  */
public class Cooper extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Cooper() {super();}

  /** Constructor which sets the default scanner. */
  public Cooper(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Cooper(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\010\000\002\003" +
    "\005\000\002\003\003\000\002\006\004\000\002\006\003" +
    "\000\002\007\003\000\002\013\004\000\002\013\003\000" +
    "\002\024\004\000\002\024\003\000\002\025\004\000\002" +
    "\025\003\000\002\025\004\000\002\025\003\000\002\025" +
    "\004\000\002\025\004\000\002\025\004\000\002\025\004" +
    "\000\002\026\005\000\002\027\011\000\002\030\005\000" +
    "\002\031\012\000\002\032\004\000\002\032\006\000\002" +
    "\032\003\000\002\033\006\000\002\033\006\000\002\020" +
    "\006\000\002\020\005\000\002\034\004\000\002\017\004" +
    "\000\002\017\003\000\002\016\012\000\002\015\004\000" +
    "\002\015\004\000\002\022\004\000\002\022\003\000\002" +
    "\023\005\000\002\023\003\000\002\021\004\000\002\011" +
    "\005\000\002\011\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\012\005\000\002\012\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\005" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\010\004\005\017\010\023\uffcb\001\002\000" +
    "\004\023\ufffe\001\002\000\004\005\ufffb\001\002\000\004" +
    "\023\050\001\002\000\004\030\ufffc\001\002\000\004\004" +
    "\005\001\002\000\004\030\045\001\002\000\004\002\044" +
    "\001\002\000\004\005\014\001\002\000\006\015\017\030" +
    "\uffcb\001\002\000\004\030\ufff9\001\002\000\004\030\uffec" +
    "\001\002\000\012\005\023\006\021\007\026\010\024\001" +
    "\002\000\016\011\uffd4\012\uffd4\013\uffd4\026\uffd4\030\uffd4" +
    "\032\uffd4\001\002\000\016\011\uffd1\012\uffd1\013\uffd1\026" +
    "\uffd1\030\uffd1\032\uffd1\001\002\000\012\011\037\012\034" +
    "\013\036\030\ufffa\001\002\000\020\011\uffd5\012\uffd5\013" +
    "\uffd5\026\uffd5\030\uffd5\031\030\032\uffd5\001\002\000\016" +
    "\011\uffd2\012\uffd2\013\uffd2\026\uffd2\030\uffd2\032\uffd2\001" +
    "\002\000\016\011\uffd7\012\uffd7\013\uffd7\026\uffd7\030\uffd7" +
    "\032\uffd7\001\002\000\016\011\uffd3\012\uffd3\013\uffd3\026" +
    "\uffd3\030\uffd3\032\uffd3\001\002\000\016\011\uffd6\012\uffd6" +
    "\013\uffd6\026\uffd6\030\uffd6\032\uffd6\001\002\000\014\005" +
    "\023\006\021\007\026\010\024\032\031\001\002\000\016" +
    "\011\uffe4\012\uffe4\013\uffe4\026\uffe4\030\uffe4\032\uffe4\001" +
    "\002\000\004\032\043\001\002\000\014\011\037\012\034" +
    "\013\036\026\035\032\uffcf\001\002\000\012\005\uffcc\006" +
    "\uffcc\007\uffcc\010\uffcc\001\002\000\012\005\023\006\021" +
    "\007\026\010\024\001\002\000\012\005\uffcd\006\uffcd\007" +
    "\uffcd\010\uffcd\001\002\000\012\005\uffce\006\uffce\007\uffce" +
    "\010\uffce\001\002\000\012\005\023\006\021\007\026\010" +
    "\024\001\002\000\016\011\uffd8\012\uffd8\013\uffd8\026\uffd8" +
    "\030\uffd8\032\uffd8\001\002\000\004\032\uffd0\001\002\000" +
    "\016\011\uffe5\012\uffe5\013\uffe5\026\uffe5\030\uffe5\032\uffe5" +
    "\001\002\000\004\002\001\001\002\000\010\004\005\017" +
    "\010\023\uffcb\001\002\000\004\023\uffff\001\002\000\004" +
    "\030\ufffd\001\002\000\004\033\051\001\002\000\024\003" +
    "\065\004\005\005\066\014\070\020\063\021\062\022\053" +
    "\025\064\034\uffcb\001\002\000\024\003\ufff5\004\ufff5\005" +
    "\ufff5\014\ufff5\020\ufff5\021\ufff5\022\ufff5\025\ufff5\034\ufff5" +
    "\001\002\000\004\031\164\001\002\000\004\030\163\001" +
    "\002\000\024\003\ufff3\004\ufff3\005\ufff3\014\ufff3\020\ufff3" +
    "\021\ufff3\022\ufff3\025\ufff3\034\ufff3\001\002\000\004\030" +
    "\162\001\002\000\004\030\161\001\002\000\004\034\130" +
    "\001\002\000\024\003\065\004\005\005\066\014\070\020" +
    "\063\021\062\022\053\025\064\034\uffcb\001\002\000\004" +
    "\031\124\001\002\000\004\031\107\001\002\000\012\005" +
    "\023\006\021\007\026\010\024\001\002\000\004\030\105" +
    "\001\002\000\006\015\103\031\030\001\002\000\004\030" +
    "\102\001\002\000\004\031\074\001\002\000\004\030\073" +
    "\001\002\000\004\034\ufff7\001\002\000\024\003\ufff6\004" +
    "\ufff6\005\ufff6\014\ufff6\020\ufff6\021\ufff6\022\ufff6\025\ufff6" +
    "\034\ufff6\001\002\000\012\005\023\006\021\007\026\010" +
    "\024\001\002\000\012\011\037\012\034\013\036\032\076" +
    "\001\002\000\004\033\077\001\002\000\024\003\065\004" +
    "\005\005\066\014\070\020\063\021\062\022\053\025\064" +
    "\034\uffcb\001\002\000\004\034\101\001\002\000\024\003" +
    "\uffed\004\uffed\005\uffed\014\uffed\020\uffed\021\uffed\022\uffed" +
    "\025\uffed\034\uffed\001\002\000\024\003\ufff4\004\ufff4\005" +
    "\ufff4\014\ufff4\020\ufff4\021\ufff4\022\ufff4\025\ufff4\034\ufff4" +
    "\001\002\000\012\005\023\006\021\007\026\010\024\001" +
    "\002\000\012\011\037\012\034\013\036\030\uffee\001\002" +
    "\000\024\003\uffef\004\uffef\005\uffef\014\uffef\020\uffef\021" +
    "\uffef\022\uffef\025\uffef\034\uffef\001\002\000\012\011\037" +
    "\012\034\013\036\030\uffe3\001\002\000\012\005\023\006" +
    "\021\007\026\010\024\001\002\000\012\011\037\012\034" +
    "\013\036\032\111\001\002\000\004\033\112\001\002\000" +
    "\024\003\065\004\005\005\066\014\070\020\063\021\062" +
    "\022\053\025\064\034\uffcb\001\002\000\004\034\114\001" +
    "\002\000\026\003\uffcb\004\uffcb\005\uffcb\014\uffcb\016\117" +
    "\020\uffcb\021\uffcb\022\uffcb\025\uffcb\034\uffcb\001\002\000" +
    "\024\003\uffe8\004\uffe8\005\uffe8\014\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\025\uffe8\034\uffe8\001\002\000\024\003\uffeb\004" +
    "\uffeb\005\uffeb\014\uffeb\020\uffeb\021\uffeb\022\uffeb\025\uffeb" +
    "\034\uffeb\001\002\000\006\020\063\033\121\001\002\000" +
    "\024\003\uffea\004\uffea\005\uffea\014\uffea\020\uffea\021\uffea" +
    "\022\uffea\025\uffea\034\uffea\001\002\000\024\003\065\004" +
    "\005\005\066\014\070\020\063\021\062\022\053\025\064" +
    "\034\uffcb\001\002\000\004\034\123\001\002\000\024\003" +
    "\uffe9\004\uffe9\005\uffe9\014\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\025\uffe9\034\uffe9\001\002\000\004\005\125\001\002\000" +
    "\004\032\126\001\002\000\004\030\uffe7\001\002\000\004" +
    "\034\ufff8\001\002\000\006\002\uffcb\024\135\001\002\000" +
    "\006\002\uffcb\024\135\001\002\000\004\002\uffe1\001\002" +
    "\000\004\002\000\001\002\000\004\005\140\001\002\000" +
    "\006\004\005\027\136\001\002\000\004\005\uffde\001\002" +
    "\000\004\005\uffdf\001\002\000\004\031\141\001\002\000" +
    "\006\004\005\032\uffcb\001\002\000\004\032\uffdc\001\002" +
    "\000\004\032\154\001\002\000\006\026\150\032\uffcb\001" +
    "\002\000\004\005\146\001\002\000\006\026\uffd9\032\uffd9" +
    "\001\002\000\004\032\uffda\001\002\000\004\004\005\001" +
    "\002\000\004\032\uffdd\001\002\000\006\026\150\032\uffcb" +
    "\001\002\000\004\032\uffdb\001\002\000\004\033\155\001" +
    "\002\000\024\003\065\004\005\005\066\014\070\020\063" +
    "\021\062\022\053\025\064\034\uffcb\001\002\000\004\034" +
    "\157\001\002\000\006\002\uffe0\024\uffe0\001\002\000\004" +
    "\002\uffe2\001\002\000\024\003\ufff1\004\ufff1\005\ufff1\014" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\025\ufff1\034\ufff1\001\002" +
    "\000\024\003\ufff2\004\ufff2\005\ufff2\014\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\025\ufff2\034\ufff2\001\002\000\024\003\ufff0" +
    "\004\ufff0\005\ufff0\014\ufff0\020\ufff0\021\ufff0\022\ufff0\025" +
    "\ufff0\034\ufff0\001\002\000\012\005\023\006\021\007\026" +
    "\010\024\001\002\000\012\011\037\012\034\013\036\032" +
    "\166\001\002\000\004\030\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\016\002\011\003\005\005\003\006\010\007" +
    "\012\030\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\012\030" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\014\013\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\024\011\021\014\017" +
    "\020\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\010\024\011\032\012\031\014\017\020\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\037\001" +
    "\001\000\002\001\001\000\014\010\024\011\032\012\041" +
    "\014\017\020\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\040\014\017\020\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\045\005\003\006\010\007\012\030\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\071\007\012\020\056\024\057\025\060" +
    "\026\070\027\051\030\066\031\054\033\055\034\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\071\007\012\020\056\024\126" +
    "\025\060\026\070\027\051\030\066\031\054\033\055\034" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\024\011\105\014\017\020\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\010\024\011\074\014\017\020\026\001\001\000\004" +
    "\004\037\001\001\000\002\001\001\000\030\005\071\007" +
    "\012\020\056\024\077\025\060\026\070\027\051\030\066" +
    "\031\054\033\055\034\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\024\011\103" +
    "\014\017\020\026\001\001\000\004\004\037\001\001\000" +
    "\002\001\001\000\004\004\037\001\001\000\012\010\024" +
    "\011\107\014\017\020\026\001\001\000\004\004\037\001" +
    "\001\000\002\001\001\000\030\005\071\007\012\020\056" +
    "\024\112\025\060\026\070\027\051\030\066\031\054\033" +
    "\055\034\053\001\001\000\002\001\001\000\006\005\114" +
    "\032\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\117\001\001\000\002\001\001\000\030\005\071" +
    "\007\012\020\056\024\121\025\060\026\070\027\051\030" +
    "\066\031\054\033\055\034\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\131\015\133" +
    "\016\130\017\132\001\001\000\012\005\131\015\133\016" +
    "\130\017\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\141" +
    "\007\144\021\143\022\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\146\023\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\144\021\151\001\001\000\002\001\001\000\006\005\146" +
    "\023\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\071\007\012\020\056\024\155\025\060\026\070" +
    "\027\051\030\066\031\054\033\055\034\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\024\011\164\014\017\020\026\001\001\000\004\004\037" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Cooper$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Cooper$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Cooper$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    
    


    }


    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Cooper$actions {


    TablaSimbolos ts = new TablaSimbolos();

  private final Cooper parser;

  /** Constructor */
  CUP$Cooper$actions(Cooper parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Cooper$do_action(
    int                        CUP$Cooper$act_num,
    java_cup.runtime.lr_parser CUP$Cooper$parser,
    java.util.Stack            CUP$Cooper$stack,
    int                        CUP$Cooper$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Cooper$result;

      /* select the action based on the action number */
      switch (CUP$Cooper$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LAMBDA ::= 
            {
              Symbols.LAMBDA RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("LAMBDA",3, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERADOR ::= Op_logico 
            {
              Symbols.OPERADOR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.OPERADOR(v,3); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("OPERADOR",2, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERADOR ::= Op_relacional 
            {
              Symbols.OPERADOR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.OPERADOR(v,2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("OPERADOR",2, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERADOR ::= Op_aritmetico 
            {
              Symbols.OPERADOR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.OPERADOR(v,1); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("OPERADOR",2, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRS ::= EXPRP 
            {
              Symbols.EXPRS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPRS(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPRS",8, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRS ::= EXPRP Coma EXPRS 
            {
              Symbols.EXPRS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.EXPRP v1 = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPRS v2 = (Symbols.EXPRS)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPRS(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPRS",8, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LITERAL ::= Numero 
            {
              Symbols.LITERAL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.LITERAL(codigo.TablaSimbolos.Tipo.tInt, v);  
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("LITERAL",10, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LITERAL ::= String 
            {
              Symbols.LITERAL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.LITERAL(codigo.TablaSimbolos.Tipo.tString, v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("LITERAL",10, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LITERAL ::= Op_booleano 
            {
              Symbols.LITERAL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.LITERAL(codigo.TablaSimbolos.Tipo.tBool,v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("LITERAL",10, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPR ::= LITERAL 
            {
              Symbols.EXPR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.LITERAL v = (Symbols.LITERAL)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPR(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPR",6, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPR ::= Id 
            {
              Symbols.EXPR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPR(v, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPR",6, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPR ::= CALL 
            {
              Symbols.EXPR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.CALL v = (Symbols.CALL)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPR(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPR",6, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRP ::= EXPR 
            {
              Symbols.EXPRP RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPR v = (Symbols.EXPR)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPRP(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPRP",7, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRP ::= EXPRP OPERADOR EXPR 
            {
              Symbols.EXPRP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.EXPRP v1 = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.OPERADOR v2 = (Symbols.OPERADOR)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPR v3 = (Symbols.EXPR)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPRP(v1,v2,v3); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPRP",7, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAM ::= TYPE Id 
            {
              Symbols.PARAM RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.TYPE v1 = (Symbols.TYPE)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.PARAM(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAM",15, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAMSP ::= LAMBDA 
            {
              Symbols.PARAMSP RESULT =null;
		 RESULT = new Symbols.PARAMSP(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAMSP",17, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMSP ::= Coma PARAM PARAMSP 
            {
              Symbols.PARAMSP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.PARAM v1 = (Symbols.PARAM)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.PARAMSP v2 = (Symbols.PARAMSP)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.PARAMSP(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAMSP",17, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMS ::= LAMBDA 
            {
              Symbols.PARAMS RESULT =null;
		 RESULT = new Symbols.PARAMS(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAMS",16, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMS ::= PARAM PARAMSP 
            {
              Symbols.PARAMS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.PARAM v1 = (Symbols.PARAM)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.PARAMSP v2 = (Symbols.PARAMSP)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.PARAMS(v1,v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAMS",16, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DEFINICION ::= Def Void 
            {
              Symbols.DEFINICION RESULT =null;
		 RESULT = new Symbols.DEFINICION(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DEFINICION",11, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DEFINICION ::= Def TYPE 
            {
              Symbols.DEFINICION RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.TYPE v = (Symbols.TYPE)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.DEFINICION(v);  
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DEFINICION",11, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNC ::= DEFINICION Id A_par PARAMS C_par A_llave INSTS C_llave 
            {
              Symbols.FUNC RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-7)).right;
		Symbols.DEFINICION v1 = (Symbols.DEFINICION)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-7)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-6)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-6)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-6)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-4)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-4)).right;
		Symbols.PARAMS v3 = (Symbols.PARAMS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-4)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.INSTS v4 = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.FUNC(v1,v2,v3,v4,ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("FUNC",12, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-7)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCS ::= LAMBDA 
            {
              Symbols.FUNCS RESULT =null;
		 RESULT = new Symbols.FUNCS(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("FUNCS",13, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNCS ::= FUNC FUNCS 
            {
              Symbols.FUNCS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.FUNC v1 = (Symbols.FUNC)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.FUNCS v2 = (Symbols.FUNCS)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.FUNCS(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("FUNCS",13, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RET ::= Return EXPRP 
            {
              Symbols.RET RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.RET(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("RET",26, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CALL ::= Id A_par C_par 
            {
              Symbols.CALL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		 RESULT = new Symbols.CALL(v, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("CALL",14, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CALL ::= Id A_par EXPRS C_par 
            {
              Symbols.CALL RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.EXPRS v2 = (Symbols.EXPRS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.CALL(v1, v2, ts);  
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("CALL",14, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IO ::= Out A_par EXPRP C_par 
            {
              Symbols.IO RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.IO(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("IO",25, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IO ::= In A_par Id C_par 
            {
              Symbols.IO RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.IO(v, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("IO",25, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ELS ::= LAMBDA 
            {
              Symbols.ELS RESULT =null;
		 RESULT = new Symbols.ELS(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ELS",24, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ELS ::= Else A_llave INSTS C_llave 
            {
              Symbols.ELS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.INSTS v = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.ELS(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ELS",24, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELS ::= Else CND 
            {
              Symbols.ELS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.CND v = (Symbols.CND)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.ELS(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ELS",24, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CND ::= If A_par EXPRP C_par A_llave INSTS C_llave ELS 
            {
              Symbols.CND RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)).right;
		Symbols.EXPRP v1 = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.INSTS v2 = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.ELS v3 = (Symbols.ELS)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.CND(v1, v2, v3);  
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("CND",23, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-7)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DCL ::= TYPE Id ASIGNACION 
            {
              Symbols.DCL RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.TYPE v1 = (Symbols.TYPE)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.ASIGNACION v3 = (Symbols.ASIGNACION)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.DCL(v1,v2, v3, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DCL",22, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // WHL ::= While A_par EXPRP C_par A_llave INSTS C_llave 
            {
              Symbols.WHL RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-4)).right;
		Symbols.EXPRP v1 = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.INSTS v2 = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.WHL(v1, v2);  
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("WHL",21, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-6)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ASIG ::= Id Igual EXPRP 
            {
              Symbols.ASIG RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPRP v2 = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.ASIG(v1,v2,ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ASIG",20, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INST ::= error PuntoYComa 
            {
              Symbols.INST RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",19, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INST ::= RET PuntoYComa 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.RET v = (Symbols.RET)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.INST(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",19, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INST ::= CALL PuntoYComa 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.CALL v = (Symbols.CALL)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.INST(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",19, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INST ::= IO PuntoYComa 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.IO v = (Symbols.IO)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.INST(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",19, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INST ::= CND 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.CND v = (Symbols.CND)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.INST(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",19, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INST ::= DCL PuntoYComa 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.DCL v = (Symbols.DCL)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.INST(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",19, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INST ::= WHL 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.WHL v = (Symbols.WHL)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.INST(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",19, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INST ::= ASIG PuntoYComa 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.ASIG v = (Symbols.ASIG)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.INST(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",19, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTS ::= LAMBDA 
            {
              Symbols.INSTS RESULT =null;
		 RESULT = new Symbols.INSTS(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INSTS",18, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTS ::= INST INSTS 
            {
              Symbols.INSTS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.INST v1 = (Symbols.INST)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.INSTS v2 = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.INSTS(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INSTS",18, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ASIGNACION ::= LAMBDA 
            {
              Symbols.ASIGNACION RESULT =null;
		 RESULT = new Symbols.ASIGNACION(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ASIGNACION ::= Igual EXPRP 
            {
              Symbols.ASIGNACION RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.ASIGNACION(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TYPE ::= Tipo 
            {
              Symbols.TYPE RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.TYPE(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("TYPE",5, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECL ::= DCL 
            {
              Symbols.DECL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.DCL v = (Symbols.DCL)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.DECL(v,false,null); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DECL",4, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECL ::= Const DCL 
            {
              Symbols.DECL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.DCL v = (Symbols.DCL)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.DECL(v, true, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DECL",4, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLS ::= LAMBDA 
            {
              Symbols.DECLS RESULT =null;
		 RESULT = new Symbols.DECLS(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DECLS",1, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLS ::= DECL PuntoYComa DECLS 
            {
              Symbols.DECLS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.DECL v1 = (Symbols.DECL)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.DECLS v2 = (Symbols.DECLS)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.DECLS(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DECLS",1, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // P ::= DECLS Main A_llave INSTS C_llave FUNCS 
            {
              Symbols.P RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)).right;
		Symbols.DECLS v1 = (Symbols.DECLS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.INSTS v2 = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.FUNCS v3 = (Symbols.FUNCS)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.P(v1, v2, v3); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("P",0, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= P EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.P start_val = (Symbols.P)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		RESULT = start_val;
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Cooper$parser.done_parsing();
          return CUP$Cooper$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

