
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 05 18:04:35 CET 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 05 18:04:35 CET 2020
  */
public class Cooper extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Cooper() {super();}

  /** Constructor which sets the default scanner. */
  public Cooper(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Cooper(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\010\000\002\003" +
    "\005\000\002\003\003\000\002\004\006\000\002\004\005" +
    "\000\002\005\003\000\002\006\004\000\002\006\003\000" +
    "\002\007\005\000\002\007\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\011\005" +
    "\000\002\012\011\000\002\013\005\000\002\014\012\000" +
    "\002\015\004\000\002\015\006\000\002\015\003\000\002" +
    "\016\006\000\002\016\006\000\002\017\006\000\002\017" +
    "\005\000\002\020\004\000\002\021\004\000\002\021\003" +
    "\000\002\022\012\000\002\023\004\000\002\023\004\000" +
    "\002\024\004\000\002\024\003\000\002\025\005\000\002" +
    "\025\003\000\002\026\004\000\002\027\005\000\002\027" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\031\005\000\002\031\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\033\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\010\011\005\012\007\016\uffcc\001\002\000" +
    "\004\016\ufffe\001\002\000\004\006\ufffb\001\002\000\004" +
    "\016\051\001\002\000\004\011\005\001\002\000\004\023" +
    "\044\001\002\000\004\002\043\001\002\000\004\006\013" +
    "\001\002\000\006\005\016\023\uffcc\001\002\000\004\023" +
    "\ufff9\001\002\000\004\023\ufffc\001\002\000\012\006\022" +
    "\010\020\033\025\034\023\001\002\000\016\021\uffd5\023" +
    "\uffd5\025\uffd5\030\uffd5\031\uffd5\032\uffd5\001\002\000\016" +
    "\021\uffd2\023\uffd2\025\uffd2\030\uffd2\031\uffd2\032\uffd2\001" +
    "\002\000\012\023\ufffa\030\040\031\036\032\037\001\002" +
    "\000\020\021\uffd6\023\uffd6\024\027\025\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\001\002\000\016\021\uffd3\023\uffd3\025\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\001\002\000\014\023\uffd8\025" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\001\002\000\016\021\uffd4" +
    "\023\uffd4\025\uffd4\030\uffd4\031\uffd4\032\uffd4\001\002\000" +
    "\016\021\uffd7\023\uffd7\025\uffd7\030\uffd7\031\uffd7\032\uffd7" +
    "\001\002\000\014\006\022\010\020\025\030\033\025\034" +
    "\023\001\002\000\016\021\uffe5\023\uffe5\025\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\001\002\000\004\025\035\001\002\000" +
    "\006\021\033\025\uffd0\001\002\000\012\006\022\010\020" +
    "\033\025\034\023\001\002\000\004\025\uffd1\001\002\000" +
    "\016\021\uffe6\023\uffe6\025\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\001\002\000\012\006\uffcd\010\uffcd\033\uffcd\034\uffcd\001" +
    "\002\000\012\006\uffce\010\uffce\033\uffce\034\uffce\001\002" +
    "\000\012\006\uffcf\010\uffcf\033\uffcf\034\uffcf\001\002\000" +
    "\012\006\022\010\020\033\025\034\023\001\002\000\014" +
    "\023\uffd9\025\uffd9\030\uffd9\031\uffd9\032\uffd9\001\002\000" +
    "\004\002\001\001\002\000\010\011\005\012\007\016\uffcc" +
    "\001\002\000\004\016\uffff\001\002\000\004\006\047\001" +
    "\002\000\006\005\016\023\uffcc\001\002\000\004\023\ufffd" +
    "\001\002\000\004\026\052\001\002\000\022\004\071\006" +
    "\067\011\005\013\065\014\063\015\055\020\066\027\uffcc" +
    "\001\002\000\004\023\ufff5\001\002\000\004\023\ufff0\001" +
    "\002\000\004\024\162\001\002\000\004\023\ufff3\001\002" +
    "\000\004\023\ufff2\001\002\000\004\023\ufff1\001\002\000" +
    "\004\027\131\001\002\000\004\023\127\001\002\000\004" +
    "\024\124\001\002\000\004\006\122\001\002\000\004\024" +
    "\105\001\002\000\012\006\022\010\020\033\025\034\023" +
    "\001\002\000\006\005\102\024\027\001\002\000\004\023" +
    "\ufff4\001\002\000\004\024\074\001\002\000\004\023\ufff6" +
    "\001\002\000\004\027\ufff7\001\002\000\012\006\022\010" +
    "\020\033\025\034\023\001\002\000\012\025\076\030\040" +
    "\031\036\032\037\001\002\000\004\026\077\001\002\000" +
    "\022\004\071\006\067\011\005\013\065\014\063\015\055" +
    "\020\066\027\uffcc\001\002\000\004\027\101\001\002\000" +
    "\004\023\uffee\001\002\000\012\006\022\010\020\033\025" +
    "\034\023\001\002\000\012\023\uffef\030\040\031\036\032" +
    "\037\001\002\000\012\023\uffe4\030\040\031\036\032\037" +
    "\001\002\000\012\006\022\010\020\033\025\034\023\001" +
    "\002\000\012\025\107\030\040\031\036\032\037\001\002" +
    "\000\004\026\110\001\002\000\022\004\071\006\067\011" +
    "\005\013\065\014\063\015\055\020\066\027\uffcc\001\002" +
    "\000\004\027\112\001\002\000\006\007\115\023\uffcc\001" +
    "\002\000\004\023\uffec\001\002\000\004\023\uffe9\001\002" +
    "\000\006\013\065\026\117\001\002\000\004\023\uffeb\001" +
    "\002\000\022\004\071\006\067\011\005\013\065\014\063" +
    "\015\055\020\066\027\uffcc\001\002\000\004\027\121\001" +
    "\002\000\004\023\uffea\001\002\000\006\005\016\023\uffcc" +
    "\001\002\000\004\023\uffed\001\002\000\004\006\125\001" +
    "\002\000\004\025\126\001\002\000\004\023\uffe8\001\002" +
    "\000\022\004\071\006\067\011\005\013\065\014\063\015" +
    "\055\020\066\027\uffcc\001\002\000\004\027\ufff8\001\002" +
    "\000\006\002\uffcc\017\135\001\002\000\006\002\uffcc\017" +
    "\135\001\002\000\004\002\uffe2\001\002\000\004\002\000" +
    "\001\002\000\006\011\005\022\157\001\002\000\004\006" +
    "\137\001\002\000\004\024\140\001\002\000\006\011\005" +
    "\025\uffcc\001\002\000\004\025\uffdd\001\002\000\004\025" +
    "\153\001\002\000\006\021\147\025\uffcc\001\002\000\004" +
    "\006\145\001\002\000\006\021\uffda\025\uffda\001\002\000" +
    "\004\025\uffdb\001\002\000\004\011\005\001\002\000\004" +
    "\025\uffde\001\002\000\006\021\147\025\uffcc\001\002\000" +
    "\004\025\uffdc\001\002\000\004\026\154\001\002\000\022" +
    "\004\071\006\067\011\005\013\065\014\063\015\055\020" +
    "\066\027\uffcc\001\002\000\004\027\156\001\002\000\006" +
    "\002\uffe1\017\uffe1\001\002\000\004\006\uffdf\001\002\000" +
    "\004\006\uffe0\001\002\000\004\002\uffe3\001\002\000\012" +
    "\006\022\010\020\033\025\034\023\001\002\000\012\025" +
    "\164\030\040\031\036\032\037\001\002\000\004\023\uffe7" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\014\002\010\003\005\004\007\005\011\033" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\014\033\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\025\027\020\030\023\034\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\017\025\030\031\031\030\034" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\025\030\031\031\033\034\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\025\030" +
    "\041\034\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\044\004\007\005\011\033\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\047\033\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\063\007\060\010\061\011\071\012\052\013\067\014\055" +
    "\016\056\017\057\020\053\033\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\025\027\103\030\023\034\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\025\027" +
    "\074\030\023\034\016\001\001\000\004\032\040\001\001" +
    "\000\002\001\001\000\030\005\063\007\077\010\061\011" +
    "\071\012\052\013\067\014\055\016\056\017\057\020\053" +
    "\033\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\025\027\102\030\023\034\016\001\001\000\004" +
    "\032\040\001\001\000\004\032\040\001\001\000\012\017" +
    "\025\027\105\030\023\034\016\001\001\000\004\032\040" +
    "\001\001\000\002\001\001\000\030\005\063\007\110\010" +
    "\061\011\071\012\052\013\067\014\055\016\056\017\057" +
    "\020\053\033\072\001\001\000\002\001\001\000\006\015" +
    "\112\033\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\115\001\001\000\002\001\001\000\030\005" +
    "\063\007\117\010\061\011\071\012\052\013\067\014\055" +
    "\016\056\017\057\020\053\033\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\122\033\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\063\007\127\010\061\011\071" +
    "\012\052\013\067\014\055\016\056\017\057\020\053\033" +
    "\072\001\001\000\002\001\001\000\012\021\133\022\131" +
    "\023\135\033\132\001\001\000\012\021\160\022\131\023" +
    "\135\033\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\143\024\141\026\142\033\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\147\033" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\143\026\150\001\001\000\002\001" +
    "\001\000\006\025\151\033\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\005\063\007\154\010\061\011" +
    "\071\012\052\013\067\014\055\016\056\017\057\020\053" +
    "\033\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\025\027\162\030\023\034\016\001\001\000\004\032" +
    "\040\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Cooper$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Cooper$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Cooper$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Cooper$actions {
  private final Cooper parser;

  /** Constructor */
  CUP$Cooper$actions(Cooper parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Cooper$do_action(
    int                        CUP$Cooper$act_num,
    java_cup.runtime.lr_parser CUP$Cooper$parser,
    java.util.Stack            CUP$Cooper$stack,
    int                        CUP$Cooper$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Cooper$result;

      /* select the action based on the action number */
      switch (CUP$Cooper$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LAMBDA ::= 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("LAMBDA",25, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERADOR ::= Op_logico 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("OPERADOR",24, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERADOR ::= Op_relacional 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("OPERADOR",24, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERADOR ::= Op_aritmetico 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("OPERADOR",24, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRS ::= EXPR 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPRS",23, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRS ::= EXPR Coma EXPRS 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPRS",23, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LITERAL ::= Numero 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("LITERAL",26, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LITERAL ::= String 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("LITERAL",26, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LITERAL ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("LITERAL",26, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPR ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPR",22, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPR ::= Id 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPR",22, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPR ::= CALL 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPR",22, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRP ::= EXPR 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPRP",21, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRP ::= EXPRP OPERADOR EXPR 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPRP",21, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAM ::= TYPE Id 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAM",20, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMSP ::= LAMBDA 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAMSP",19, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMSP ::= Coma PARAM PARAMSP 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAMSP",19, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMS ::= LAMBDA 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAMS",18, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMS ::= PARAM PARAMSP 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAMS",18, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DEFINICION ::= Def Void 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DEFINICION",17, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DEFINICION ::= Def TYPE 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DEFINICION",17, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNC ::= DEFINICION Id A_par PARAMS C_par A_llave INSTS C_llave 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("FUNC",16, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-7)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNCS ::= LAMBDA 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("FUNCS",15, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCS ::= FUNC FUNCS 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("FUNCS",15, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RET ::= Return EXPRP 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("RET",14, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CALL ::= Id A_par C_par 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("CALL",13, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CALL ::= Id A_par EXPRS C_par 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("CALL",13, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IO ::= Out A_par EXPRP C_par 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("IO",12, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IO ::= In A_par Id C_par 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("IO",12, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ELS ::= LAMBDA 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ELS",11, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELS ::= Else A_llave INSTS C_llave 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ELS",11, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ELS ::= Else CND 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ELS",11, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CND ::= If A_par EXPRP C_par A_llave INSTS C_llave ELS 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("CND",10, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-7)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DCL ::= TYPE Id ASIGNACION 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DCL",9, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // WHL ::= While A_par EXPRP C_par A_llave INSTS C_llave 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("WHL",8, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-6)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASIG ::= Id Igual EXPRP 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ASIG",7, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INST ::= RET 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",6, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INST ::= CALL 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",6, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INST ::= IO 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",6, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INST ::= CND 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",6, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INST ::= DCL 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",6, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INST ::= WHL 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",6, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INST ::= ASIG 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",6, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTS ::= LAMBDA 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INSTS",5, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTS ::= INST PuntoYComa INSTS 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INSTS",5, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ASIGNACION ::= LAMBDA 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ASIGNACION ::= Igual EXPRP 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TYPE ::= Tipo 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("TYPE",3, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECL ::= TYPE Id ASIGNACION 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECL ::= Const TYPE Id ASIGNACION 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLS ::= LAMBDA 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DECLS",1, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLS ::= DECL PuntoYComa DECLS 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DECLS",1, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // P ::= DECLS Main A_llave INSTS C_llave FUNCS 
            {
              Object RESULT =null;
		 System.out.println("cosas"); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("P",0, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= P EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		RESULT = start_val;
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Cooper$parser.done_parsing();
          return CUP$Cooper$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

