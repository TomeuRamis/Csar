
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 06 23:27:14 CET 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 06 23:27:14 CET 2020
  */
public class Cooper extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Cooper() {super();}

  /** Constructor which sets the default scanner. */
  public Cooper(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Cooper(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\010\000\002\003" +
    "\005\000\002\003\003\000\002\006\004\000\002\006\003" +
    "\000\002\007\003\000\002\013\004\000\002\013\003\000" +
    "\002\024\004\000\002\024\003\000\002\025\004\000\002" +
    "\025\003\000\002\025\004\000\002\025\003\000\002\025" +
    "\004\000\002\025\004\000\002\025\004\000\002\026\005" +
    "\000\002\027\011\000\002\030\005\000\002\031\012\000" +
    "\002\032\004\000\002\032\006\000\002\032\003\000\002" +
    "\033\006\000\002\033\006\000\002\020\006\000\002\020" +
    "\005\000\002\034\004\000\002\017\004\000\002\017\003" +
    "\000\002\016\012\000\002\015\004\000\002\015\004\000" +
    "\002\022\004\000\002\022\003\000\002\023\005\000\002" +
    "\023\003\000\002\021\004\000\002\011\005\000\002\011" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\012\005\000\002\012\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\005\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\010\004\005\015\010\021\uffcc\001\002\000" +
    "\004\021\ufffe\001\002\000\004\005\ufffb\001\002\000\004" +
    "\021\050\001\002\000\004\026\ufffc\001\002\000\004\004" +
    "\005\001\002\000\004\026\045\001\002\000\004\002\044" +
    "\001\002\000\004\005\014\001\002\000\006\013\017\026" +
    "\uffcc\001\002\000\004\026\ufff9\001\002\000\004\026\uffed" +
    "\001\002\000\012\005\023\006\021\033\026\034\024\001" +
    "\002\000\016\007\uffd5\010\uffd5\011\uffd5\024\uffd5\026\uffd5" +
    "\030\uffd5\001\002\000\016\007\uffd2\010\uffd2\011\uffd2\024" +
    "\uffd2\026\uffd2\030\uffd2\001\002\000\012\007\037\010\034" +
    "\011\036\026\ufffa\001\002\000\020\007\uffd6\010\uffd6\011" +
    "\uffd6\024\uffd6\026\uffd6\027\030\030\uffd6\001\002\000\016" +
    "\007\uffd3\010\uffd3\011\uffd3\024\uffd3\026\uffd3\030\uffd3\001" +
    "\002\000\016\007\uffd8\010\uffd8\011\uffd8\024\uffd8\026\uffd8" +
    "\030\uffd8\001\002\000\016\007\uffd4\010\uffd4\011\uffd4\024" +
    "\uffd4\026\uffd4\030\uffd4\001\002\000\016\007\uffd7\010\uffd7" +
    "\011\uffd7\024\uffd7\026\uffd7\030\uffd7\001\002\000\014\005" +
    "\023\006\021\030\031\033\026\034\024\001\002\000\016" +
    "\007\uffe5\010\uffe5\011\uffe5\024\uffe5\026\uffe5\030\uffe5\001" +
    "\002\000\004\030\043\001\002\000\014\007\037\010\034" +
    "\011\036\024\035\030\uffd0\001\002\000\012\005\uffcd\006" +
    "\uffcd\033\uffcd\034\uffcd\001\002\000\012\005\023\006\021" +
    "\033\026\034\024\001\002\000\012\005\uffce\006\uffce\033" +
    "\uffce\034\uffce\001\002\000\012\005\uffcf\006\uffcf\033\uffcf" +
    "\034\uffcf\001\002\000\012\005\023\006\021\033\026\034" +
    "\024\001\002\000\016\007\uffd9\010\uffd9\011\uffd9\024\uffd9" +
    "\026\uffd9\030\uffd9\001\002\000\004\030\uffd1\001\002\000" +
    "\016\007\uffe6\010\uffe6\011\uffe6\024\uffe6\026\uffe6\030\uffe6" +
    "\001\002\000\004\002\001\001\002\000\010\004\005\015" +
    "\010\021\uffcc\001\002\000\004\021\uffff\001\002\000\004" +
    "\026\ufffd\001\002\000\004\031\051\001\002\000\022\004" +
    "\005\005\065\012\067\016\063\017\062\020\054\023\064" +
    "\032\uffcc\001\002\000\022\004\ufff5\005\ufff5\012\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\023\ufff5\032\ufff5\001\002\000\004" +
    "\026\164\001\002\000\004\027\161\001\002\000\022\004" +
    "\ufff3\005\ufff3\012\ufff3\016\ufff3\017\ufff3\020\ufff3\023\ufff3" +
    "\032\ufff3\001\002\000\004\026\160\001\002\000\004\026" +
    "\157\001\002\000\004\032\126\001\002\000\022\004\005" +
    "\005\065\012\067\016\063\017\062\020\054\023\064\032" +
    "\uffcc\001\002\000\004\027\122\001\002\000\004\027\105" +
    "\001\002\000\012\005\023\006\021\033\026\034\024\001" +
    "\002\000\006\013\102\027\030\001\002\000\004\026\101" +
    "\001\002\000\004\027\073\001\002\000\004\026\072\001" +
    "\002\000\004\032\ufff7\001\002\000\022\004\ufff6\005\ufff6" +
    "\012\ufff6\016\ufff6\017\ufff6\020\ufff6\023\ufff6\032\ufff6\001" +
    "\002\000\012\005\023\006\021\033\026\034\024\001\002" +
    "\000\012\007\037\010\034\011\036\030\075\001\002\000" +
    "\004\031\076\001\002\000\022\004\005\005\065\012\067" +
    "\016\063\017\062\020\054\023\064\032\uffcc\001\002\000" +
    "\004\032\100\001\002\000\022\004\uffee\005\uffee\012\uffee" +
    "\016\uffee\017\uffee\020\uffee\023\uffee\032\uffee\001\002\000" +
    "\022\004\ufff4\005\ufff4\012\ufff4\016\ufff4\017\ufff4\020\ufff4" +
    "\023\ufff4\032\ufff4\001\002\000\012\005\023\006\021\033" +
    "\026\034\024\001\002\000\012\007\037\010\034\011\036" +
    "\026\uffef\001\002\000\012\007\037\010\034\011\036\026" +
    "\uffe4\001\002\000\012\005\023\006\021\033\026\034\024" +
    "\001\002\000\012\007\037\010\034\011\036\030\107\001" +
    "\002\000\004\031\110\001\002\000\022\004\005\005\065" +
    "\012\067\016\063\017\062\020\054\023\064\032\uffcc\001" +
    "\002\000\004\032\112\001\002\000\024\004\uffcc\005\uffcc" +
    "\012\uffcc\014\115\016\uffcc\017\uffcc\020\uffcc\023\uffcc\032" +
    "\uffcc\001\002\000\022\004\uffec\005\uffec\012\uffec\016\uffec" +
    "\017\uffec\020\uffec\023\uffec\032\uffec\001\002\000\022\004" +
    "\uffe9\005\uffe9\012\uffe9\016\uffe9\017\uffe9\020\uffe9\023\uffe9" +
    "\032\uffe9\001\002\000\006\016\063\031\117\001\002\000" +
    "\022\004\uffeb\005\uffeb\012\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\023\uffeb\032\uffeb\001\002\000\022\004\005\005\065\012" +
    "\067\016\063\017\062\020\054\023\064\032\uffcc\001\002" +
    "\000\004\032\121\001\002\000\022\004\uffea\005\uffea\012" +
    "\uffea\016\uffea\017\uffea\020\uffea\023\uffea\032\uffea\001\002" +
    "\000\004\005\123\001\002\000\004\030\124\001\002\000" +
    "\004\026\uffe8\001\002\000\004\032\ufff8\001\002\000\006" +
    "\002\uffcc\022\132\001\002\000\006\002\uffcc\022\132\001" +
    "\002\000\004\002\uffe2\001\002\000\004\002\000\001\002" +
    "\000\006\004\005\025\154\001\002\000\004\005\134\001" +
    "\002\000\004\027\135\001\002\000\006\004\005\030\uffcc" +
    "\001\002\000\004\030\uffdd\001\002\000\004\030\150\001" +
    "\002\000\006\024\144\030\uffcc\001\002\000\004\005\142" +
    "\001\002\000\006\024\uffda\030\uffda\001\002\000\004\030" +
    "\uffdb\001\002\000\004\004\005\001\002\000\004\030\uffde" +
    "\001\002\000\006\024\144\030\uffcc\001\002\000\004\030" +
    "\uffdc\001\002\000\004\031\151\001\002\000\022\004\005" +
    "\005\065\012\067\016\063\017\062\020\054\023\064\032" +
    "\uffcc\001\002\000\004\032\153\001\002\000\006\002\uffe1" +
    "\022\uffe1\001\002\000\004\005\uffdf\001\002\000\004\005" +
    "\uffe0\001\002\000\004\002\uffe3\001\002\000\022\004\ufff1" +
    "\005\ufff1\012\ufff1\016\ufff1\017\ufff1\020\ufff1\023\ufff1\032" +
    "\ufff1\001\002\000\022\004\ufff2\005\ufff2\012\ufff2\016\ufff2" +
    "\017\ufff2\020\ufff2\023\ufff2\032\ufff2\001\002\000\012\005" +
    "\023\006\021\033\026\034\024\001\002\000\012\007\037" +
    "\010\034\011\036\030\163\001\002\000\004\026\uffe7\001" +
    "\002\000\022\004\ufff0\005\ufff0\012\ufff0\016\ufff0\017\ufff0" +
    "\020\ufff0\023\ufff0\032\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\016\002\011\003\005\005\003\006\010\007" +
    "\012\030\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\012\030" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\014\013\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\024\011\021\014\017" +
    "\020\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\010\024\011\032\012\031\014\017\020\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\037\001" +
    "\001\000\002\001\001\000\014\010\024\011\032\012\041" +
    "\014\017\020\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\040\014\017\020\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\045\005\003\006\010\007\012\030\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\070\007\012\020\056\024\057\025\060" +
    "\026\067\027\051\030\065\031\054\033\055\034\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\070\007\012\020\056\024\124" +
    "\025\060\026\067\027\051\030\065\031\054\033\055\034" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\024\011\103\014\017\020\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\024\011" +
    "\073\014\017\020\026\001\001\000\004\004\037\001\001" +
    "\000\002\001\001\000\030\005\070\007\012\020\056\024" +
    "\076\025\060\026\067\027\051\030\065\031\054\033\055" +
    "\034\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\024\011\102\014\017\020\026" +
    "\001\001\000\004\004\037\001\001\000\004\004\037\001" +
    "\001\000\012\010\024\011\105\014\017\020\026\001\001" +
    "\000\004\004\037\001\001\000\002\001\001\000\030\005" +
    "\070\007\012\020\056\024\110\025\060\026\067\027\051" +
    "\030\065\031\054\033\055\034\052\001\001\000\002\001" +
    "\001\000\006\005\113\032\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\115\001\001\000\002\001" +
    "\001\000\030\005\070\007\012\020\056\024\117\025\060" +
    "\026\067\027\051\030\065\031\054\033\055\034\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\127\015\132\016\126\017\130\001\001\000\012" +
    "\005\127\015\132\016\126\017\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\135\007\140\021" +
    "\137\022\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\142\023\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\140\021\145" +
    "\001\001\000\002\001\001\000\006\005\142\023\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\005\070" +
    "\007\012\020\056\024\151\025\060\026\067\027\051\030" +
    "\065\031\054\033\055\034\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\024\011\161\014\017\020\026\001\001\000\004\004" +
    "\037\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Cooper$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Cooper$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Cooper$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    
    


    }


    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Cooper$actions {


    TablaSimbolos ts = new TablaSimbolos();

  private final Cooper parser;

  /** Constructor */
  CUP$Cooper$actions(Cooper parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Cooper$do_action(
    int                        CUP$Cooper$act_num,
    java_cup.runtime.lr_parser CUP$Cooper$parser,
    java.util.Stack            CUP$Cooper$stack,
    int                        CUP$Cooper$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Cooper$result;

      /* select the action based on the action number */
      switch (CUP$Cooper$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LAMBDA ::= 
            {
              Symbols.LAMBDA RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("LAMBDA",3, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERADOR ::= Op_logico 
            {
              Symbols.OPERADOR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.OPERADOR(v,3); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("OPERADOR",2, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERADOR ::= Op_relacional 
            {
              Symbols.OPERADOR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.OPERADOR(v,2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("OPERADOR",2, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERADOR ::= Op_aritmetico 
            {
              Symbols.OPERADOR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.OPERADOR(v,1); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("OPERADOR",2, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRS ::= EXPRP 
            {
              Symbols.EXPRS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPRS(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPRS",8, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRS ::= EXPRP Coma EXPRS 
            {
              Symbols.EXPRS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.EXPRP v1 = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPRS v2 = (Symbols.EXPRS)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPRS(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPRS",8, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LITERAL ::= Numero 
            {
              Symbols.LITERAL RESULT =null;
		 RESULT = new Symbols.LITERAL(codigo.TablaSimbolos.Tipo.tInt);  
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("LITERAL",10, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LITERAL ::= String 
            {
              Symbols.LITERAL RESULT =null;
		 RESULT = new Symbols.LITERAL(codigo.TablaSimbolos.Tipo.tString); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("LITERAL",10, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LITERAL ::= Op_booleano 
            {
              Symbols.LITERAL RESULT =null;
		 RESULT = new Symbols.LITERAL(codigo.TablaSimbolos.Tipo.tBool); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("LITERAL",10, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPR ::= LITERAL 
            {
              Symbols.EXPR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.LITERAL v = (Symbols.LITERAL)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPR(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPR",6, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPR ::= Id 
            {
              Symbols.EXPR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPR(v, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPR",6, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPR ::= CALL 
            {
              Symbols.EXPR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.CALL v = (Symbols.CALL)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPR(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPR",6, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRP ::= EXPR 
            {
              Symbols.EXPRP RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPR v = (Symbols.EXPR)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPRP(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPRP",7, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRP ::= EXPRP OPERADOR EXPR 
            {
              Symbols.EXPRP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.EXPRP v1 = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.OPERADOR v2 = (Symbols.OPERADOR)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPR v3 = (Symbols.EXPR)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPRP(v1,v2,v3); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPRP",7, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAM ::= TYPE Id 
            {
              Symbols.PARAM RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.TYPE v1 = (Symbols.TYPE)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.PARAM(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAM",15, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMSP ::= LAMBDA 
            {
              Symbols.PARAMSP RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAMSP",17, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMSP ::= Coma PARAM PARAMSP 
            {
              Symbols.PARAMSP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.PARAM v1 = (Symbols.PARAM)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.PARAMSP v2 = (Symbols.PARAMSP)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.PARAMSP(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAMSP",17, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMS ::= LAMBDA 
            {
              Symbols.PARAMS RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAMS",16, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMS ::= PARAM PARAMSP 
            {
              Symbols.PARAMS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.PARAM v1 = (Symbols.PARAM)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.PARAMSP v2 = (Symbols.PARAMSP)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.PARAMS(v1,v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAMS",16, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DEFINICION ::= Def Void 
            {
              Symbols.DEFINICION RESULT =null;
		 RESULT = new Symbols.DEFINICION(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DEFINICION",11, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DEFINICION ::= Def TYPE 
            {
              Symbols.DEFINICION RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.TYPE v = (Symbols.TYPE)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.DEFINICION(v);  
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DEFINICION",11, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNC ::= DEFINICION Id A_par PARAMS C_par A_llave INSTS C_llave 
            {
              Symbols.FUNC RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-7)).right;
		Symbols.DEFINICION v1 = (Symbols.DEFINICION)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-7)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-6)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-6)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-6)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-4)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-4)).right;
		Symbols.PARAMS v3 = (Symbols.PARAMS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-4)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.INSTS v4 = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.FUNC(v1,v2,v3,v4,ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("FUNC",12, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-7)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNCS ::= LAMBDA 
            {
              Symbols.FUNCS RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("FUNCS",13, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCS ::= FUNC FUNCS 
            {
              Symbols.FUNCS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.FUNC v1 = (Symbols.FUNC)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.FUNCS v2 = (Symbols.FUNCS)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.FUNCS(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("FUNCS",13, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RET ::= Return EXPRP 
            {
              Symbols.RET RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.RET(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("RET",26, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CALL ::= Id A_par C_par 
            {
              Symbols.CALL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		 RESULT = new Symbols.CALL(v, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("CALL",14, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CALL ::= Id A_par EXPRS C_par 
            {
              Symbols.CALL RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.EXPRS v2 = (Symbols.EXPRS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.CALL(v1, v2, ts);  
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("CALL",14, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IO ::= Out A_par EXPRP C_par 
            {
              Symbols.IO RESULT =null;
		 RESULT = new Symbols.IO(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("IO",25, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IO ::= In A_par Id C_par 
            {
              Symbols.IO RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.IO(v, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("IO",25, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ELS ::= LAMBDA 
            {
              Symbols.ELS RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ELS",24, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELS ::= Else A_llave INSTS C_llave 
            {
              Symbols.ELS RESULT =null;
		 RESULT = new Symbols.ELS(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ELS",24, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ELS ::= Else CND 
            {
              Symbols.ELS RESULT =null;
		 RESULT = new Symbols.ELS(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ELS",24, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CND ::= If A_par EXPRP C_par A_llave INSTS C_llave ELS 
            {
              Symbols.CND RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)).value;
		 RESULT = new Symbols.CND(v);  
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("CND",23, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-7)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DCL ::= TYPE Id ASIGNACION 
            {
              Symbols.DCL RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.TYPE v1 = (Symbols.TYPE)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.ASIGNACION v3 = (Symbols.ASIGNACION)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.DCL(v1,v2, v3, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DCL",22, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // WHL ::= While A_par EXPRP C_par A_llave INSTS C_llave 
            {
              Symbols.WHL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-4)).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-4)).value;
		 RESULT = new Symbols.WHL(v);  
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("WHL",21, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-6)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASIG ::= Id Igual EXPRP 
            {
              Symbols.ASIG RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPRP v2 = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.ASIG(v1,v2,ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ASIG",20, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INST ::= RET PuntoYComa 
            {
              Symbols.INST RESULT =null;
		 RESULT = new Symbols.INST(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",19, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INST ::= CALL PuntoYComa 
            {
              Symbols.INST RESULT =null;
		 RESULT = new Symbols.INST(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",19, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INST ::= IO PuntoYComa 
            {
              Symbols.INST RESULT =null;
		 RESULT = new Symbols.INST(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",19, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INST ::= CND 
            {
              Symbols.INST RESULT =null;
		 RESULT = new Symbols.INST(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",19, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INST ::= DCL PuntoYComa 
            {
              Symbols.INST RESULT =null;
		 RESULT = new Symbols.INST(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",19, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INST ::= WHL 
            {
              Symbols.INST RESULT =null;
		 RESULT = new Symbols.INST(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",19, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INST ::= ASIG PuntoYComa 
            {
              Symbols.INST RESULT =null;
		 RESULT = new Symbols.INST(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",19, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTS ::= LAMBDA 
            {
              Symbols.INSTS RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INSTS",18, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTS ::= INST INSTS 
            {
              Symbols.INSTS RESULT =null;
		 RESULT = new Symbols.INSTS(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INSTS",18, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ASIGNACION ::= LAMBDA 
            {
              Symbols.ASIGNACION RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ASIGNACION ::= Igual EXPRP 
            {
              Symbols.ASIGNACION RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.ASIGNACION(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TYPE ::= Tipo 
            {
              Symbols.TYPE RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.TYPE(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("TYPE",5, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECL ::= DCL 
            {
              Symbols.DECL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.DCL v = (Symbols.DCL)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.DECL(v,false,null); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DECL",4, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECL ::= Const DCL 
            {
              Symbols.DECL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.DCL v = (Symbols.DCL)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.DECL(v, true, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DECL",4, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLS ::= LAMBDA 
            {
              Symbols.DECLS RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DECLS",1, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLS ::= DECL PuntoYComa DECLS 
            {
              Symbols.DECLS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.DECLS(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DECLS",1, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // P ::= DECLS Main A_llave INSTS C_llave FUNCS 
            {
              Symbols.P RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)).right;
		Symbols.DECLS v1 = (Symbols.DECLS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.INSTS v2 = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.FUNCS v3 = (Symbols.FUNCS)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.P(v1, v2, v3); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("P",0, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= P EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.P start_val = (Symbols.P)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		RESULT = start_val;
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Cooper$parser.done_parsing();
          return CUP$Cooper$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

