
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 06 17:33:28 CET 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 06 17:33:28 CET 2020
  */
public class Cooper extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Cooper() {super();}

  /** Constructor which sets the default scanner. */
  public Cooper(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Cooper(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\010\000\002\003" +
    "\005\000\002\003\003\000\002\004\006\000\002\004\005" +
    "\000\002\030\003\000\002\033\004\000\002\033\003\000" +
    "\002\005\005\000\002\005\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\007\005" +
    "\000\002\010\011\000\002\011\005\000\002\012\012\000" +
    "\002\013\004\000\002\013\006\000\002\013\003\000\002" +
    "\014\006\000\002\014\006\000\002\015\006\000\002\015" +
    "\005\000\002\016\004\000\002\017\004\000\002\017\003" +
    "\000\002\020\012\000\002\021\004\000\002\021\004\000" +
    "\002\022\004\000\002\022\003\000\002\023\005\000\002" +
    "\023\003\000\002\024\004\000\002\032\005\000\002\032" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\025\005\000\002\025\003\000\002\026\003\000\002" +
    "\035\002\000\002\026\004\000\002\026\003\000\002\027" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\010\004\005\012\007\016\uffcb\001\002\000" +
    "\004\016\ufffe\001\002\000\004\005\ufffb\001\002\000\004" +
    "\016\052\001\002\000\004\004\005\001\002\000\004\023" +
    "\045\001\002\000\004\002\044\001\002\000\004\005\013" +
    "\001\002\000\006\010\016\023\uffcb\001\002\000\004\023" +
    "\ufff9\001\002\000\004\023\ufffc\001\002\000\012\005\022" +
    "\006\020\033\025\034\023\001\002\000\016\021\uffd5\023" +
    "\uffd5\025\uffd5\030\uffd5\031\uffd5\032\uffd5\001\002\000\016" +
    "\021\uffd2\023\uffd2\025\uffd2\030\uffd2\031\uffd2\032\uffd2\001" +
    "\002\000\012\023\ufffa\030\040\031\036\032\uffce\001\002" +
    "\000\020\021\uffd6\023\uffd6\024\027\025\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\001\002\000\016\021\uffd3\023\uffd3\025\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\001\002\000\014\023\uffd8\025" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\001\002\000\016\021\uffd4" +
    "\023\uffd4\025\uffd4\030\uffd4\031\uffd4\032\uffd4\001\002\000" +
    "\016\021\uffd7\023\uffd7\025\uffd7\030\uffd7\031\uffd7\032\uffd7" +
    "\001\002\000\014\005\022\006\020\025\030\033\025\034" +
    "\023\001\002\000\016\021\uffe5\023\uffe5\025\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\001\002\000\004\025\035\001\002\000" +
    "\006\021\033\025\uffd0\001\002\000\012\005\022\006\020" +
    "\033\025\034\023\001\002\000\004\025\uffd1\001\002\000" +
    "\016\021\uffe6\023\uffe6\025\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\001\002\000\012\005\uffcc\006\uffcc\033\uffcc\034\uffcc\001" +
    "\002\000\004\032\043\001\002\000\012\005\uffcf\006\uffcf" +
    "\033\uffcf\034\uffcf\001\002\000\012\005\022\006\020\033" +
    "\025\034\023\001\002\000\014\023\uffd9\025\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\001\002\000\012\005\uffcd\006\uffcd\033" +
    "\uffcd\034\uffcd\001\002\000\004\002\001\001\002\000\010" +
    "\004\005\012\007\016\uffcb\001\002\000\004\016\uffff\001" +
    "\002\000\004\005\050\001\002\000\006\010\016\023\uffcb" +
    "\001\002\000\004\023\ufffd\001\002\000\004\026\053\001" +
    "\002\000\022\004\005\005\070\007\072\013\066\014\064" +
    "\015\056\020\067\027\uffcb\001\002\000\004\023\ufff5\001" +
    "\002\000\004\023\ufff0\001\002\000\004\024\163\001\002" +
    "\000\004\023\ufff3\001\002\000\004\023\ufff2\001\002\000" +
    "\004\023\ufff1\001\002\000\004\027\132\001\002\000\004" +
    "\023\130\001\002\000\004\024\125\001\002\000\004\005" +
    "\123\001\002\000\004\024\106\001\002\000\012\005\022" +
    "\006\020\033\025\034\023\001\002\000\006\010\103\024" +
    "\027\001\002\000\004\023\ufff4\001\002\000\004\024\075" +
    "\001\002\000\004\023\ufff6\001\002\000\004\027\ufff7\001" +
    "\002\000\012\005\022\006\020\033\025\034\023\001\002" +
    "\000\012\025\077\030\040\031\036\032\uffce\001\002\000" +
    "\004\026\100\001\002\000\022\004\005\005\070\007\072" +
    "\013\066\014\064\015\056\020\067\027\uffcb\001\002\000" +
    "\004\027\102\001\002\000\004\023\uffee\001\002\000\012" +
    "\005\022\006\020\033\025\034\023\001\002\000\012\023" +
    "\uffef\030\040\031\036\032\uffce\001\002\000\012\023\uffe4" +
    "\030\040\031\036\032\uffce\001\002\000\012\005\022\006" +
    "\020\033\025\034\023\001\002\000\012\025\110\030\040" +
    "\031\036\032\uffce\001\002\000\004\026\111\001\002\000" +
    "\022\004\005\005\070\007\072\013\066\014\064\015\056" +
    "\020\067\027\uffcb\001\002\000\004\027\113\001\002\000" +
    "\006\011\116\023\uffcb\001\002\000\004\023\uffec\001\002" +
    "\000\004\023\uffe9\001\002\000\006\013\066\026\120\001" +
    "\002\000\004\023\uffeb\001\002\000\022\004\005\005\070" +
    "\007\072\013\066\014\064\015\056\020\067\027\uffcb\001" +
    "\002\000\004\027\122\001\002\000\004\023\uffea\001\002" +
    "\000\006\010\016\023\uffcb\001\002\000\004\023\uffed\001" +
    "\002\000\004\005\126\001\002\000\004\025\127\001\002" +
    "\000\004\023\uffe8\001\002\000\022\004\005\005\070\007" +
    "\072\013\066\014\064\015\056\020\067\027\uffcb\001\002" +
    "\000\004\027\ufff8\001\002\000\006\002\uffcb\017\136\001" +
    "\002\000\006\002\uffcb\017\136\001\002\000\004\002\uffe2" +
    "\001\002\000\004\002\000\001\002\000\006\004\005\022" +
    "\160\001\002\000\004\005\140\001\002\000\004\024\141" +
    "\001\002\000\006\004\005\025\uffcb\001\002\000\004\025" +
    "\uffdd\001\002\000\004\025\154\001\002\000\006\021\150" +
    "\025\uffcb\001\002\000\004\005\146\001\002\000\006\021" +
    "\uffda\025\uffda\001\002\000\004\025\uffdb\001\002\000\004" +
    "\004\005\001\002\000\004\025\uffde\001\002\000\006\021" +
    "\150\025\uffcb\001\002\000\004\025\uffdc\001\002\000\004" +
    "\026\155\001\002\000\022\004\005\005\070\007\072\013" +
    "\066\014\064\015\056\020\067\027\uffcb\001\002\000\004" +
    "\027\157\001\002\000\006\002\uffe1\017\uffe1\001\002\000" +
    "\004\005\uffdf\001\002\000\004\005\uffe0\001\002\000\004" +
    "\002\uffe3\001\002\000\012\005\022\006\020\033\025\034" +
    "\023\001\002\000\012\025\165\030\040\031\036\032\uffce" +
    "\001\002\000\004\023\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\014\002\010\003\005\004\007\027\003\030" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\013\033\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\025\031\023\032\020\034\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\040\035\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\015\025\025\030\031" +
    "\031\034\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\025\025\033\031\031\034" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\025\031\041\034\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\045\004\007\027" +
    "\003\030\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\013\033\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\061\006\062\007\072\010\053" +
    "\011\070\012\056\014\057\015\060\016\054\027\073\030" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\025\031" +
    "\023\032\104\034\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\025\031\023\032\075\034\016\001\001" +
    "\000\006\026\040\035\036\001\001\000\002\001\001\000" +
    "\030\005\100\006\062\007\072\010\053\011\070\012\056" +
    "\014\057\015\060\016\054\027\073\030\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\025\031\023" +
    "\032\103\034\016\001\001\000\006\026\040\035\036\001" +
    "\001\000\006\026\040\035\036\001\001\000\012\015\025" +
    "\031\023\032\106\034\016\001\001\000\006\026\040\035" +
    "\036\001\001\000\002\001\001\000\030\005\111\006\062" +
    "\007\072\010\053\011\070\012\056\014\057\015\060\016" +
    "\054\027\073\030\064\001\001\000\002\001\001\000\006" +
    "\013\113\027\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\116\001\001\000\002\001\001\000\030" +
    "\005\120\006\062\007\072\010\053\011\070\012\056\014" +
    "\057\015\060\016\054\027\073\030\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\013\033\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\005\130\006\062\007\072\010" +
    "\053\011\070\012\056\014\057\015\060\016\054\027\073" +
    "\030\064\001\001\000\002\001\001\000\012\017\134\020" +
    "\132\021\136\027\133\001\001\000\012\017\161\020\132" +
    "\021\136\027\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\022\142\024\143\027\141\030\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\150" +
    "\027\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\024\151\030\144\001\001\000\002" +
    "\001\001\000\006\023\152\027\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\005\155\006\062\007\072" +
    "\010\053\011\070\012\056\014\057\015\060\016\054\027" +
    "\073\030\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\025\031\023\032\163\034\016\001\001\000\006" +
    "\026\040\035\036\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Cooper$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Cooper$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Cooper$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    TablaSimbolos ts = new TablaSimbolos();
    


    }


    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Cooper$actions {
  private final Cooper parser;

  /** Constructor */
  CUP$Cooper$actions(Cooper parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Cooper$do_action(
    int                        CUP$Cooper$act_num,
    java_cup.runtime.lr_parser CUP$Cooper$parser,
    java.util.Stack            CUP$Cooper$stack,
    int                        CUP$Cooper$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Cooper$result;

      /* select the action based on the action number */
      switch (CUP$Cooper$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LAMBDA ::= 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("LAMBDA",21, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERADOR ::= Op_logico 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("OPERADOR",20, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERADOR ::= NT$0 Op_relacional 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("OPERADOR",20, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$0 ::= 
            {
              Object RESULT =null;
 //RESULT = new OPERADOR(v2.type, v2.value); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("NT$0",27, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERADOR ::= Op_aritmetico 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("OPERADOR",20, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRS ::= EXPR 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPRS",19, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRS ::= EXPR Coma EXPRS 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPRS",19, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LITERAL ::= Numero 
            {
              Symbols.LITERAL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.LITERAL(v);  
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("LITERAL",26, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LITERAL ::= String 
            {
              Symbols.LITERAL RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("LITERAL",26, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LITERAL ::= Op_booleano 
            {
              Symbols.LITERAL RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("LITERAL",26, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPR ::= LITERAL 
            {
              Symbols.EXPR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.LITERAL v = (Symbols.LITERAL)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 Symbols.EXPR id = new Symbols.EXPR(v.literal); RESULT = id; 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPR ::= Id 
            {
              Symbols.EXPR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 Symbols.EXPR id = new Symbols.EXPR(v); RESULT = id; 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPR ::= CALL 
            {
              Symbols.EXPR RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRP ::= EXPR 
            {
              Symbols.EXPRP RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPR v = (Symbols.EXPR)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		Symbols.EXPRP exprp = new Symbols.EXPRP(v); RESULT = exprp;  
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPRP",24, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRP ::= EXPRP OPERADOR EXPR 
            {
              Symbols.EXPRP RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPRP",24, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAM ::= TYPE Id 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAM",18, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMSP ::= LAMBDA 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAMSP",17, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMSP ::= Coma PARAM PARAMSP 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAMSP",17, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMS ::= LAMBDA 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAMS",16, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMS ::= PARAM PARAMSP 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAMS",16, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DEFINICION ::= Def Void 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DEFINICION",15, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DEFINICION ::= Def TYPE 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DEFINICION",15, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNC ::= DEFINICION Id A_par PARAMS C_par A_llave INSTS C_llave 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("FUNC",14, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-7)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNCS ::= LAMBDA 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("FUNCS",13, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCS ::= FUNC FUNCS 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("FUNCS",13, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RET ::= Return EXPRP 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("RET",12, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CALL ::= Id A_par C_par 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("CALL",11, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CALL ::= Id A_par EXPRS C_par 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("CALL",11, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IO ::= Out A_par EXPRP C_par 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("IO",10, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IO ::= In A_par Id C_par 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("IO",10, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ELS ::= LAMBDA 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ELS",9, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELS ::= Else A_llave INSTS C_llave 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ELS",9, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ELS ::= Else CND 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ELS",9, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CND ::= If A_par EXPRP C_par A_llave INSTS C_llave ELS 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("CND",8, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-7)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DCL ::= TYPE Id ASIGNACION 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DCL",7, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // WHL ::= While A_par EXPRP C_par A_llave INSTS C_llave 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("WHL",6, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-6)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASIG ::= Id Igual EXPRP 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ASIG",5, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INST ::= RET 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INST ::= CALL 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INST ::= IO 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INST ::= CND 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INST ::= DCL 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INST ::= WHL 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INST ::= ASIG 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTS ::= LAMBDA 
            {
              Object RESULT =null;
		 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INSTS",3, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTS ::= INST PuntoYComa INSTS 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INSTS",3, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ASIGNACION ::= LAMBDA 
            {
              Symbols.ASIGNACION RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ASIGNACION",25, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ASIGNACION ::= Igual EXPRP 
            {
              Symbols.ASIGNACION RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		Symbols.ASIGNACION asig = new Symbols.ASIGNACION(v); RESULT = asig;  
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ASIGNACION",25, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TYPE ::= Tipo 
            {
              Symbols.TYPE RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 Symbols.TYPE t = new Symbols.TYPE((v)); RESULT = t;
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("TYPE",22, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECL ::= TYPE Id ASIGNACION 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.TYPE v1 = (Symbols.TYPE)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.ASIGNACION v3 = (Symbols.ASIGNACION)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 Symbols.DECL decl = new Symbols.DECL(v1.valor, v2, v3.asignacion); RESULT = decl;  
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECL ::= Const TYPE Id ASIGNACION 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLS ::= LAMBDA 
            {
              Object RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DECLS",1, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLS ::= DECL PuntoYComa DECLS 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 // 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DECLS",1, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // P ::= DECLS Main A_llave INSTS C_llave FUNCS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 //Symbol main = new Symbol(sym.Main, "main"); RESULT = main; System.out.println(main.sym); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("P",0, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= P EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		RESULT = start_val;
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Cooper$parser.done_parsing();
          return CUP$Cooper$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

