
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 07 21:26:23 CET 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 07 21:26:23 CET 2020
  */
public class Cooper extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Cooper() {super();}

  /** Constructor which sets the default scanner. */
  public Cooper(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Cooper(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\004\005\000\002\005\005\000\002\005\003" +
    "\000\002\010\004\000\002\010\003\000\002\011\003\000" +
    "\002\015\004\000\002\015\003\000\002\030\004\000\002" +
    "\030\003\000\002\031\004\000\002\031\003\000\002\031" +
    "\004\000\002\031\003\000\002\031\004\000\002\031\004" +
    "\000\002\031\004\000\002\032\005\000\002\033\004\000" +
    "\002\034\007\000\002\035\004\000\002\036\005\000\002" +
    "\037\004\000\002\040\007\000\002\041\005\000\002\042" +
    "\004\000\002\042\004\000\002\042\003\000\002\043\004" +
    "\000\002\044\004\000\002\045\006\000\002\045\006\000" +
    "\002\024\006\000\002\024\005\000\002\046\004\000\002" +
    "\023\004\000\002\023\003\000\002\020\004\000\002\021" +
    "\010\000\002\022\004\000\002\017\004\000\002\017\004" +
    "\000\002\026\004\000\002\026\003\000\002\027\005\000" +
    "\002\027\003\000\002\025\004\000\002\013\005\000\002" +
    "\013\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\014\005\000\002\014\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\010\004\006\017\005\023\uffc2\001\002\000" +
    "\022\004\006\005\071\014\073\020\067\021\065\022\054" +
    "\025\070\034\uffc2\001\002\000\004\004\006\001\002\000" +
    "\004\005\ufff9\001\002\000\004\030\ufffa\001\002\000\004" +
    "\002\051\001\002\000\004\023\ufffc\001\002\000\004\005" +
    "\021\001\002\000\004\023\017\001\002\000\004\030\015" +
    "\001\002\000\010\004\006\017\005\023\uffc2\001\002\000" +
    "\004\023\ufffd\001\002\000\004\033\020\001\002\000\022" +
    "\004\uffff\005\uffff\014\uffff\020\uffff\021\uffff\022\uffff\025" +
    "\uffff\034\uffff\001\002\000\006\015\024\030\uffc2\001\002" +
    "\000\004\030\ufff7\001\002\000\004\030\uffe9\001\002\000" +
    "\012\005\030\006\026\007\033\010\031\001\002\000\016" +
    "\011\uffcb\012\uffcb\013\uffcb\026\uffcb\030\uffcb\032\uffcb\001" +
    "\002\000\016\011\uffc8\012\uffc8\013\uffc8\026\uffc8\030\uffc8" +
    "\032\uffc8\001\002\000\012\011\044\012\041\013\043\030" +
    "\ufff8\001\002\000\020\011\uffcc\012\uffcc\013\uffcc\026\uffcc" +
    "\030\uffcc\031\035\032\uffcc\001\002\000\016\011\uffc9\012" +
    "\uffc9\013\uffc9\026\uffc9\030\uffc9\032\uffc9\001\002\000\016" +
    "\011\uffce\012\uffce\013\uffce\026\uffce\030\uffce\032\uffce\001" +
    "\002\000\016\011\uffca\012\uffca\013\uffca\026\uffca\030\uffca" +
    "\032\uffca\001\002\000\016\011\uffcd\012\uffcd\013\uffcd\026" +
    "\uffcd\030\uffcd\032\uffcd\001\002\000\014\005\030\006\026" +
    "\007\033\010\031\032\036\001\002\000\016\011\uffdd\012" +
    "\uffdd\013\uffdd\026\uffdd\030\uffdd\032\uffdd\001\002\000\004" +
    "\032\050\001\002\000\014\011\044\012\041\013\043\026" +
    "\042\032\uffc6\001\002\000\012\005\uffc3\006\uffc3\007\uffc3" +
    "\010\uffc3\001\002\000\012\005\030\006\026\007\033\010" +
    "\031\001\002\000\012\005\uffc4\006\uffc4\007\uffc4\010\uffc4" +
    "\001\002\000\012\005\uffc5\006\uffc5\007\uffc5\010\uffc5\001" +
    "\002\000\012\005\030\006\026\007\033\010\031\001\002" +
    "\000\016\011\uffcf\012\uffcf\013\uffcf\026\uffcf\030\uffcf\032" +
    "\uffcf\001\002\000\004\032\uffc7\001\002\000\016\011\uffde" +
    "\012\uffde\013\uffde\026\uffde\030\uffde\032\uffde\001\002\000" +
    "\004\002\001\001\002\000\004\030\ufffb\001\002\000\022" +
    "\004\ufff3\005\ufff3\014\ufff3\020\ufff3\021\ufff3\022\ufff3\025" +
    "\ufff3\034\ufff3\001\002\000\004\031\174\001\002\000\004" +
    "\030\173\001\002\000\004\030\172\001\002\000\004\002" +
    "\000\001\002\000\022\004\ufff1\005\ufff1\014\ufff1\020\ufff1" +
    "\021\ufff1\022\ufff1\025\ufff1\034\ufff1\001\002\000\004\030" +
    "\171\001\002\000\022\004\006\005\071\014\073\020\067" +
    "\021\065\022\054\025\070\034\uffc2\001\002\000\004\034" +
    "\122\001\002\000\022\004\006\005\071\014\073\020\067" +
    "\021\065\022\054\025\070\034\uffc2\001\002\000\004\031" +
    "\116\001\002\000\022\004\006\005\071\014\073\020\067" +
    "\021\065\022\054\025\070\034\uffc2\001\002\000\004\031" +
    "\107\001\002\000\012\005\030\006\026\007\033\010\031" +
    "\001\002\000\006\015\104\031\035\001\002\000\004\030" +
    "\103\001\002\000\004\031\077\001\002\000\004\030\076" +
    "\001\002\000\004\034\ufff5\001\002\000\022\004\ufff4\005" +
    "\ufff4\014\ufff4\020\ufff4\021\ufff4\022\ufff4\025\ufff4\034\ufff4" +
    "\001\002\000\012\005\030\006\026\007\033\010\031\001" +
    "\002\000\012\011\044\012\041\013\043\032\101\001\002" +
    "\000\004\033\102\001\002\000\022\004\uffeb\005\uffeb\014" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\025\uffeb\034\uffeb\001\002" +
    "\000\022\004\ufff2\005\ufff2\014\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\025\ufff2\034\ufff2\001\002\000\012\005\030\006\026" +
    "\007\033\010\031\001\002\000\012\011\044\012\041\013" +
    "\043\030\uffed\001\002\000\012\011\044\012\041\013\043" +
    "\030\uffdc\001\002\000\012\005\030\006\026\007\033\010" +
    "\031\001\002\000\012\011\044\012\041\013\043\032\111" +
    "\001\002\000\004\033\112\001\002\000\022\004\uffe7\005" +
    "\uffe7\014\uffe7\020\uffe7\021\uffe7\022\uffe7\025\uffe7\034\uffe7" +
    "\001\002\000\004\034\115\001\002\000\022\004\uffec\005" +
    "\uffec\014\uffec\020\uffec\021\uffec\022\uffec\025\uffec\034\uffec" +
    "\001\002\000\022\004\uffea\005\uffea\014\uffea\020\uffea\021" +
    "\uffea\022\uffea\025\uffea\034\uffea\001\002\000\004\005\117" +
    "\001\002\000\004\032\120\001\002\000\004\030\uffe0\001" +
    "\002\000\004\034\ufff6\001\002\000\006\002\uffc2\024\127" +
    "\001\002\000\006\002\uffc2\024\127\001\002\000\004\002" +
    "\uffda\001\002\000\004\002\ufffe\001\002\000\022\004\006" +
    "\005\071\014\073\020\067\021\065\022\054\025\070\034" +
    "\uffc2\001\002\000\006\004\006\027\147\001\002\000\004" +
    "\005\131\001\002\000\004\031\132\001\002\000\006\004" +
    "\006\032\uffc2\001\002\000\004\032\uffd3\001\002\000\004" +
    "\032\145\001\002\000\006\026\141\032\uffc2\001\002\000" +
    "\004\005\137\001\002\000\006\026\uffd0\032\uffd0\001\002" +
    "\000\004\032\uffd1\001\002\000\004\004\006\001\002\000" +
    "\004\032\uffd4\001\002\000\006\026\141\032\uffc2\001\002" +
    "\000\004\032\uffd2\001\002\000\004\033\146\001\002\000" +
    "\022\004\uffd8\005\uffd8\014\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\025\uffd8\034\uffd8\001\002\000\004\005\uffd5\001\002\000" +
    "\004\005\uffd6\001\002\000\004\034\153\001\002\000\006" +
    "\002\uffd9\024\uffd9\001\002\000\006\002\uffd7\024\uffd7\001" +
    "\002\000\004\002\uffdb\001\002\000\022\004\uffe8\005\uffe8" +
    "\014\uffe8\020\uffe8\021\uffe8\022\uffe8\025\uffe8\034\uffe8\001" +
    "\002\000\004\034\157\001\002\000\024\004\uffc2\005\uffc2" +
    "\014\uffc2\016\163\020\uffc2\021\uffc2\022\uffc2\025\uffc2\034" +
    "\uffc2\001\002\000\022\004\uffe6\005\uffe6\014\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\025\uffe6\034\uffe6\001\002\000\022\004" +
    "\006\005\071\014\073\020\067\021\065\022\054\025\070" +
    "\034\uffc2\001\002\000\022\004\uffe3\005\uffe3\014\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\025\uffe3\034\uffe3\001\002\000\006" +
    "\020\067\033\165\001\002\000\022\004\uffe5\005\uffe5\014" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\025\uffe5\034\uffe5\001\002" +
    "\000\022\004\uffe2\005\uffe2\014\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\025\uffe2\034\uffe2\001\002\000\004\034\170\001\002" +
    "\000\022\004\uffe4\005\uffe4\014\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\025\uffe4\034\uffe4\001\002\000\022\004\uffe1\005\uffe1" +
    "\014\uffe1\020\uffe1\021\uffe1\022\uffe1\025\uffe1\034\uffe1\001" +
    "\002\000\022\004\uffef\005\uffef\014\uffef\020\uffef\021\uffef" +
    "\022\uffef\025\uffef\034\uffef\001\002\000\022\004\ufff0\005" +
    "\ufff0\014\ufff0\020\ufff0\021\ufff0\022\ufff0\025\ufff0\034\ufff0" +
    "\001\002\000\022\004\uffee\005\uffee\014\uffee\020\uffee\021" +
    "\uffee\022\uffee\025\uffee\034\uffee\001\002\000\012\005\030" +
    "\006\026\007\033\010\031\001\002\000\012\011\044\012" +
    "\041\013\043\032\176\001\002\000\004\030\uffdf\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\020\002\007\003\003\005\012\007\010\010" +
    "\013\011\011\036\006\001\001\000\036\004\056\007\074" +
    "\011\011\024\060\030\062\031\063\032\073\033\052\034" +
    "\065\036\071\037\057\040\061\045\055\046\054\001\001" +
    "\000\006\011\011\036\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\015\007\010\010\013\011\011\036\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\021\015\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\031\013\026\016\024\024\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\012\031\013\037" +
    "\014\036\016\024\024\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\044\001\001\000\002\001\001" +
    "\000\014\012\031\013\037\014\046\016\024\024\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\045" +
    "\016\024\024\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\007\074\011\011\024\060\030\155\031" +
    "\063\032\073\033\052\034\065\036\071\037\057\040\061" +
    "\041\154\045\055\046\054\001\001\000\002\001\001\000" +
    "\034\007\074\011\011\024\060\030\120\031\063\032\073" +
    "\033\052\034\065\036\071\037\057\040\061\045\055\046" +
    "\054\001\001\000\002\001\001\000\036\007\074\011\011" +
    "\024\060\030\112\031\063\032\073\033\052\034\065\035" +
    "\113\036\071\037\057\040\061\045\055\046\054\001\001" +
    "\000\002\001\001\000\012\012\031\013\105\016\024\024" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\031\013\077\016\024\024\033\001\001" +
    "\000\004\006\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\031\013\104\016\024" +
    "\024\033\001\001\000\004\006\044\001\001\000\004\006" +
    "\044\001\001\000\012\012\031\013\107\016\024\024\033" +
    "\001\001\000\004\006\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\123\017\127\020\122" +
    "\021\125\023\124\001\001\000\014\007\123\017\127\020" +
    "\122\021\125\023\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\007\074\011\011\022\151\024\060\030" +
    "\150\031\063\032\073\033\052\034\065\036\071\037\057" +
    "\040\061\045\055\046\054\001\001\000\004\011\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\132" +
    "\011\135\025\134\026\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\137\027\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\135\025\142\001\001\000\002\001\001\000\006\007\137" +
    "\027\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\161" +
    "\042\157\043\160\001\001\000\002\001\001\000\036\007" +
    "\074\011\011\024\060\030\165\031\063\032\073\033\052" +
    "\034\065\036\071\037\057\040\061\044\166\045\055\046" +
    "\054\001\001\000\002\001\001\000\006\037\163\040\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\031\013" +
    "\174\016\024\024\033\001\001\000\004\006\044\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Cooper$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Cooper$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Cooper$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    
    


    }


    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Cooper$actions {


    TablaSimbolos ts = new TablaSimbolos();

  private final Cooper parser;

  /** Constructor */
  CUP$Cooper$actions(Cooper parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Cooper$do_action(
    int                        CUP$Cooper$act_num,
    java_cup.runtime.lr_parser CUP$Cooper$parser,
    java.util.Stack            CUP$Cooper$stack,
    int                        CUP$Cooper$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Cooper$result;

      /* select the action based on the action number */
      switch (CUP$Cooper$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LAMBDA ::= 
            {
              Symbols.LAMBDA RESULT =null;

              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("LAMBDA",5, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERADOR ::= Op_logico 
            {
              Symbols.OPERADOR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.OPERADOR(v,3); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("OPERADOR",4, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERADOR ::= Op_relacional 
            {
              Symbols.OPERADOR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.OPERADOR(v,2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("OPERADOR",4, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERADOR ::= Op_aritmetico 
            {
              Symbols.OPERADOR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.OPERADOR(v,1); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("OPERADOR",4, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRS ::= EXPRP 
            {
              Symbols.EXPRS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPRS(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPRS",10, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRS ::= EXPRP Coma EXPRS 
            {
              Symbols.EXPRS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.EXPRP v1 = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPRS v2 = (Symbols.EXPRS)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPRS(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPRS",10, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LITERAL ::= Numero 
            {
              Symbols.LITERAL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.LITERAL(codigo.TablaSimbolos.Tipo.tInt, v);  
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("LITERAL",12, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LITERAL ::= String 
            {
              Symbols.LITERAL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.LITERAL(codigo.TablaSimbolos.Tipo.tString, v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("LITERAL",12, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LITERAL ::= Op_booleano 
            {
              Symbols.LITERAL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.LITERAL(codigo.TablaSimbolos.Tipo.tBool,v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("LITERAL",12, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPR ::= LITERAL 
            {
              Symbols.EXPR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.LITERAL v = (Symbols.LITERAL)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPR(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPR",8, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPR ::= Id 
            {
              Symbols.EXPR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPR(v, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPR",8, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPR ::= CALL 
            {
              Symbols.EXPR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.CALL v = (Symbols.CALL)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPR(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPR",8, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRP ::= EXPR 
            {
              Symbols.EXPRP RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPR v = (Symbols.EXPR)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPRP(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPRP",9, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRP ::= EXPRP OPERADOR EXPR 
            {
              Symbols.EXPRP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.EXPRP v1 = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.OPERADOR v2 = (Symbols.OPERADOR)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPR v3 = (Symbols.EXPR)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.EXPRP(v1,v2,v3); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("EXPRP",9, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PARAM ::= TYPE Id 
            {
              Symbols.PARAM RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.TYPE v1 = (Symbols.TYPE)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.PARAM(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAM",19, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PARAMSP ::= LAMBDA 
            {
              Symbols.PARAMSP RESULT =null;
		 RESULT = new Symbols.PARAMSP(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAMSP",21, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARAMSP ::= Coma PARAM PARAMSP 
            {
              Symbols.PARAMSP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.PARAM v1 = (Symbols.PARAM)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.PARAMSP v2 = (Symbols.PARAMSP)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.PARAMSP(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAMSP",21, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PARAMS ::= LAMBDA 
            {
              Symbols.PARAMS RESULT =null;
		 RESULT = new Symbols.PARAMS(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAMS",20, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PARAMS ::= PARAM PARAMSP 
            {
              Symbols.PARAMS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.PARAM v1 = (Symbols.PARAM)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.PARAMSP v2 = (Symbols.PARAMSP)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.PARAMS(v1,v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("PARAMS",20, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DEFINICION ::= Def Void 
            {
              Symbols.DEFINICION RESULT =null;
		 RESULT = new Symbols.DEFINICION(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DEFINICION",13, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DEFINICION ::= Def TYPE 
            {
              Symbols.DEFINICION RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.TYPE v = (Symbols.TYPE)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.DEFINICION(v);  
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DEFINICION",13, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUNC2 ::= INSTS C_llave 
            {
              Symbols.FUNC2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.INSTS v = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.FUNC2(v,ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("FUNC2",16, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUNC1 ::= DEFINICION Id A_par PARAMS C_par A_llave 
            {
              Symbols.FUNC1 RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)).right;
		Symbols.DEFINICION v1 = (Symbols.DEFINICION)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-4)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.PARAMS v3 = (Symbols.PARAMS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		 RESULT = new Symbols.FUNC1(v1, v2, v3, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("FUNC1",15, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-5)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNC ::= FUNC1 FUNC2 
            {
              Symbols.FUNC RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.FUNC1 v1 = (Symbols.FUNC1)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.FUNC2 v2 = (Symbols.FUNC2)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.FUNC(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("FUNC",14, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCS ::= LAMBDA 
            {
              Symbols.FUNCS RESULT =null;
		 RESULT = new Symbols.FUNCS(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("FUNCS",17, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNCS ::= FUNC FUNCS 
            {
              Symbols.FUNCS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.FUNC v1 = (Symbols.FUNC)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.FUNCS v2 = (Symbols.FUNCS)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.FUNCS(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("FUNCS",17, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RET ::= Return EXPRP 
            {
              Symbols.RET RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.RET(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("RET",36, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CALL ::= Id A_par C_par 
            {
              Symbols.CALL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		 RESULT = new Symbols.CALL(v, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("CALL",18, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CALL ::= Id A_par EXPRS C_par 
            {
              Symbols.CALL RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.EXPRS v2 = (Symbols.EXPRS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.CALL(v1, v2, ts);  
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("CALL",18, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IO ::= Out A_par EXPRP C_par 
            {
              Symbols.IO RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.IO(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("IO",35, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IO ::= In A_par Id C_par 
            {
              Symbols.IO RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.IO(v, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("IO",35, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-3)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ELS2 ::= INSTS C_llave 
            {
              Symbols.ELS2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.INSTS v = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.ELS2(v, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ELS2",34, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ELS1 ::= Else A_llave 
            {
              Symbols.ELS1 RESULT =null;
		 RESULT = new Symbols.ELS1(ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ELS1",33, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ELS ::= LAMBDA 
            {
              Symbols.ELS RESULT =null;
		 RESULT = new Symbols.ELS(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ELS",32, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ELS ::= ELS1 ELS2 
            {
              Symbols.ELS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.ELS1 v1 = (Symbols.ELS1)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.ELS2 v2 = (Symbols.ELS2)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.ELS(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ELS",32, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ELS ::= Else CND 
            {
              Symbols.ELS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.CND v = (Symbols.CND)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.ELS(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ELS",32, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CND2 ::= INSTS C_llave ELS 
            {
              Symbols.CND2 RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.INSTS v1 = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.ELS v2 = (Symbols.ELS)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.CND2(v1, v2, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("CND2",31, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CND1 ::= If A_par EXPRP C_par A_llave 
            {
              Symbols.CND1 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		 RESULT = new Symbols.CND1(v, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("CND1",30, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-4)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CND ::= CND1 CND2 
            {
              Symbols.CND RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.CND1 v1 = (Symbols.CND1)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.CND2 v2 = (Symbols.CND2)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.CND(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("CND",29, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DCL ::= TYPE Id ASIGNACION 
            {
              Symbols.DCL RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.TYPE v1 = (Symbols.TYPE)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.ASIGNACION v3 = (Symbols.ASIGNACION)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.DCL(v1,v2, v3, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DCL",28, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // WHL2 ::= INSTS C_llave 
            {
              Symbols.WHL2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.INSTS v = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.WHL2(v, ts);  
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("WHL2",27, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // WHL1 ::= While A_par EXPRP C_par A_llave 
            {
              Symbols.WHL1 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		 RESULT = new Symbols.WHL1(v, ts);  
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("WHL1",26, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-4)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // WHL ::= WHL1 WHL2 
            {
              Symbols.WHL RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.WHL1 v1 = (Symbols.WHL1)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.WHL2 v2 = (Symbols.WHL2)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.WHL(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("WHL",25, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIG ::= Id Igual EXPRP 
            {
              Symbols.ASIG RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPRP v2 = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.ASIG(v1,v2,ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ASIG",24, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INST ::= RET PuntoYComa 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.RET v = (Symbols.RET)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.INST(v, true ); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INST ::= CALL PuntoYComa 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.CALL v = (Symbols.CALL)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.INST(v, true ); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INST ::= IO PuntoYComa 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.IO v = (Symbols.IO)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.INST(v, true ); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INST ::= CND 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.CND v = (Symbols.CND)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.INST(v, false); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INST ::= DCL PuntoYComa 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.DCL v = (Symbols.DCL)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.INST(v, true ); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INST ::= WHL 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.WHL v = (Symbols.WHL)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.INST(v, false); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INST ::= ASIG PuntoYComa 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.ASIG v = (Symbols.ASIG)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		 RESULT = new Symbols.INST(v, true ); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTS ::= LAMBDA 
            {
              Symbols.INSTS RESULT =null;
		 RESULT = new Symbols.INSTS(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INSTS",22, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTS ::= INST INSTS 
            {
              Symbols.INSTS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.INST v1 = (Symbols.INST)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.INSTS v2 = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.INSTS(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("INSTS",22, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ASIGNACION ::= LAMBDA 
            {
              Symbols.ASIGNACION RESULT =null;
		 RESULT = new Symbols.ASIGNACION(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ASIGNACION ::= Igual EXPRP 
            {
              Symbols.ASIGNACION RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.ASIGNACION(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TYPE ::= Tipo 
            {
              Symbols.TYPE RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.TYPE(v); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("TYPE",7, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECL ::= DCL 
            {
              Symbols.DECL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.DCL v = (Symbols.DCL)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.DECL(v,false,null); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DECL",6, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECL ::= Const DCL 
            {
              Symbols.DECL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.DCL v = (Symbols.DCL)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.DECL(v, true, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DECL",6, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLS ::= LAMBDA 
            {
              Symbols.DECLS RESULT =null;
		 RESULT = new Symbols.DECLS(); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DECLS",3, ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLS ::= DECL PuntoYComa DECLS 
            {
              Symbols.DECLS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.DECL v1 = (Symbols.DECL)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.DECLS v2 = (Symbols.DECLS)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.DECLS(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("DECLS",3, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // P2 ::= INSTS C_llave FUNCS 
            {
              Symbols.P2 RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.INSTS v1 = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.FUNCS v2 = (Symbols.FUNCS)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.P2(v1, v2, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("P2",2, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P1 ::= DECLS Main A_llave 
            {
              Symbols.P1 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).right;
		Symbols.DECLS v = (Symbols.DECLS)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)).value;
		 RESULT = new Symbols.P1(v, ts); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("P1",1, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-2)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // P ::= P1 P2 
            {
              Symbols.P RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.P1 v1 = (Symbols.P1)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()).right;
		Symbols.P2 v2 = (Symbols.P2)((java_cup.runtime.Symbol) CUP$Cooper$stack.peek()).value;
		 RESULT = new Symbols.P(v1, v2); 
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("P",0, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          return CUP$Cooper$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= P EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).right;
		Symbols.P start_val = (Symbols.P)((java_cup.runtime.Symbol) CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)).value;
		RESULT = start_val;
              CUP$Cooper$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Cooper$stack.elementAt(CUP$Cooper$top-1)), ((java_cup.runtime.Symbol)CUP$Cooper$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Cooper$parser.done_parsing();
          return CUP$Cooper$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

