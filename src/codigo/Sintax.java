
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jul 01 14:00:01 CEST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jul 01 14:00:01 CEST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\005\005\000\002\005\003" +
    "\000\002\010\004\000\002\010\003\000\002\010\003\000" +
    "\002\011\003\000\002\015\004\000\002\015\003\000\002" +
    "\030\004\000\002\030\003\000\002\031\004\000\002\031" +
    "\003\000\002\031\004\000\002\031\003\000\002\031\004" +
    "\000\002\031\004\000\002\031\004\000\002\031\004\000" +
    "\002\031\004\000\002\032\005\000\002\033\004\000\002" +
    "\034\010\000\002\035\004\000\002\036\005\000\002\037" +
    "\004\000\002\040\007\000\002\041\005\000\002\042\004" +
    "\000\002\042\004\000\002\042\003\000\002\043\004\000" +
    "\002\044\004\000\002\045\003\000\002\046\006\000\002" +
    "\046\006\000\002\024\006\000\002\024\005\000\002\047" +
    "\004\000\002\023\004\000\002\023\003\000\002\020\004" +
    "\000\002\021\010\000\002\022\004\000\002\017\004\000" +
    "\002\017\004\000\002\026\004\000\002\026\003\000\002" +
    "\027\005\000\002\027\003\000\002\025\004\000\002\013" +
    "\005\000\002\013\003\000\002\012\005\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\014\005\000\002" +
    "\014\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\050\003\000\002\007\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\014\003\015\004\006\017\005\023\uffbc\024" +
    "\uffbc\001\002\000\024\003\064\004\006\005\065\014\070" +
    "\020\062\021\060\022\047\025\063\034\uffbc\001\002\000" +
    "\004\004\006\001\002\000\004\005\ufff8\001\002\000\004" +
    "\030\ufffa\001\002\000\004\002\204\001\002\000\006\023" +
    "\ufffc\024\ufffc\001\002\000\004\005\177\001\002\000\006" +
    "\023\uffbc\024\025\001\002\000\004\030\016\001\002\000" +
    "\004\030\ufff9\001\002\000\014\003\015\004\006\017\005" +
    "\023\uffbc\024\uffbc\001\002\000\006\023\ufffd\024\ufffd\001" +
    "\002\000\006\023\uffbc\024\025\001\002\000\004\023\uffd6" +
    "\001\002\000\004\023\174\001\002\000\024\003\064\004" +
    "\006\005\065\014\070\020\062\021\060\022\047\025\063" +
    "\034\uffbc\001\002\000\004\005\030\001\002\000\006\004" +
    "\006\027\026\001\002\000\004\005\uffd1\001\002\000\004" +
    "\005\uffd2\001\002\000\004\031\031\001\002\000\006\004" +
    "\006\032\uffbc\001\002\000\004\032\uffcf\001\002\000\004" +
    "\032\044\001\002\000\006\026\040\032\uffbc\001\002\000" +
    "\004\005\036\001\002\000\006\026\uffcc\032\uffcc\001\002" +
    "\000\004\032\uffcd\001\002\000\004\004\006\001\002\000" +
    "\004\032\uffd0\001\002\000\006\026\040\032\uffbc\001\002" +
    "\000\004\032\uffce\001\002\000\004\033\045\001\002\000" +
    "\024\003\uffd4\004\uffd4\005\uffd4\014\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\025\uffd4\034\uffd4\001\002\000\024\003\ufff2\004" +
    "\ufff2\005\ufff2\014\ufff2\020\ufff2\021\ufff2\022\ufff2\025\ufff2" +
    "\034\ufff2\001\002\000\004\031\171\001\002\000\004\030" +
    "\170\001\002\000\024\003\ufff0\004\ufff0\005\ufff0\014\ufff0" +
    "\020\ufff0\021\ufff0\022\ufff0\025\ufff0\034\ufff0\001\002\000" +
    "\004\030\167\001\002\000\004\030\166\001\002\000\026" +
    "\003\uffbc\004\uffbc\005\uffbc\014\uffbc\016\157\020\uffbc\021" +
    "\uffbc\022\uffbc\025\uffbc\034\uffbc\001\002\000\024\003\064" +
    "\004\006\005\065\014\070\020\062\021\060\022\047\025" +
    "\063\034\uffbc\001\002\000\004\034\151\001\002\000\024" +
    "\003\064\004\006\005\065\014\070\020\062\021\060\022" +
    "\047\025\063\034\uffbc\001\002\000\004\031\145\001\002" +
    "\000\024\003\064\004\006\005\065\014\070\020\062\021" +
    "\060\022\047\025\063\034\uffbc\001\002\000\004\031\136" +
    "\001\002\000\014\005\101\006\106\007\102\010\105\031" +
    "\100\001\002\000\006\030\134\034\133\001\002\000\006" +
    "\015\131\031\117\001\002\000\006\023\uffd5\024\uffd5\001" +
    "\002\000\004\030\130\001\002\000\004\031\uffbc\001\002" +
    "\000\004\030\073\001\002\000\004\034\ufff4\001\002\000" +
    "\024\003\ufff3\004\ufff3\005\ufff3\014\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\025\ufff3\034\ufff3\001\002\000\004\031\uffbd\001" +
    "\002\000\004\031\076\001\002\000\014\005\101\006\106" +
    "\007\102\010\105\031\100\001\002\000\016\011\uffc6\012" +
    "\uffc6\013\uffc6\026\uffc6\030\uffc6\032\uffc6\001\002\000\014" +
    "\005\101\006\106\007\102\010\105\031\100\001\002\000" +
    "\020\011\uffc7\012\uffc7\013\uffc7\026\uffc7\030\uffc7\031\117" +
    "\032\uffc7\001\002\000\016\011\uffc5\012\uffc5\013\uffc5\026" +
    "\uffc5\030\uffc5\032\uffc5\001\002\000\012\011\113\012\111" +
    "\013\112\032\110\001\002\000\016\011\uffca\012\uffca\013" +
    "\uffca\026\uffca\030\uffca\032\uffca\001\002\000\016\011\uffc4" +
    "\012\uffc4\013\uffc4\026\uffc4\030\uffc4\032\uffc4\001\002\000" +
    "\016\011\uffc3\012\uffc3\013\uffc3\026\uffc3\030\uffc3\032\uffc3" +
    "\001\002\000\016\011\uffc8\012\uffc8\013\uffc8\026\uffc8\030" +
    "\uffc8\032\uffc8\001\002\000\004\033\116\001\002\000\014" +
    "\005\uffbe\006\uffbe\007\uffbe\010\uffbe\031\uffbe\001\002\000" +
    "\014\005\uffbf\006\uffbf\007\uffbf\010\uffbf\031\uffbf\001\002" +
    "\000\014\005\uffc0\006\uffc0\007\uffc0\010\uffc0\031\uffc0\001" +
    "\002\000\014\005\101\006\106\007\102\010\105\031\100" +
    "\001\002\000\016\011\uffcb\012\uffcb\013\uffcb\026\uffcb\030" +
    "\uffcb\032\uffcb\001\002\000\024\003\uffe8\004\uffe8\005\uffe8" +
    "\014\uffe8\020\uffe8\021\uffe8\022\uffe8\025\uffe8\034\uffe8\001" +
    "\002\000\016\005\101\006\106\007\102\010\105\031\100" +
    "\032\120\001\002\000\016\011\uffd9\012\uffd9\013\uffd9\026" +
    "\uffd9\030\uffd9\032\uffd9\001\002\000\004\032\125\001\002" +
    "\000\014\011\113\012\111\013\112\026\123\032\uffc1\001" +
    "\002\000\014\005\101\006\106\007\102\010\105\031\100" +
    "\001\002\000\004\032\uffc2\001\002\000\016\011\uffda\012" +
    "\uffda\013\uffda\026\uffda\030\uffda\032\uffda\001\002\000\012" +
    "\011\113\012\111\013\112\032\127\001\002\000\016\011" +
    "\uffc9\012\uffc9\013\uffc9\026\uffc9\030\uffc9\032\uffc9\001\002" +
    "\000\024\003\ufff1\004\ufff1\005\ufff1\014\ufff1\020\ufff1\021" +
    "\ufff1\022\ufff1\025\ufff1\034\ufff1\001\002\000\014\005\101" +
    "\006\106\007\102\010\105\031\100\001\002\000\012\011" +
    "\113\012\111\013\112\030\uffea\001\002\000\024\003\uffeb" +
    "\004\uffeb\005\uffeb\014\uffeb\020\uffeb\021\uffeb\022\uffeb\025" +
    "\uffeb\034\uffeb\001\002\000\024\003\uffec\004\uffec\005\uffec" +
    "\014\uffec\020\uffec\021\uffec\022\uffec\025\uffec\034\uffec\001" +
    "\002\000\012\011\113\012\111\013\112\030\uffd8\001\002" +
    "\000\014\005\101\006\106\007\102\010\105\031\100\001" +
    "\002\000\012\011\113\012\111\013\112\032\140\001\002" +
    "\000\004\033\141\001\002\000\024\003\uffe4\004\uffe4\005" +
    "\uffe4\014\uffe4\020\uffe4\021\uffe4\022\uffe4\025\uffe4\034\uffe4" +
    "\001\002\000\004\034\144\001\002\000\024\003\uffe9\004" +
    "\uffe9\005\uffe9\014\uffe9\020\uffe9\021\uffe9\022\uffe9\025\uffe9" +
    "\034\uffe9\001\002\000\024\003\uffe7\004\uffe7\005\uffe7\014" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\025\uffe7\034\uffe7\001\002" +
    "\000\004\005\146\001\002\000\004\032\147\001\002\000" +
    "\004\030\uffdc\001\002\000\004\034\ufff5\001\002\000\006" +
    "\023\uffd3\024\uffd3\001\002\000\004\034\153\001\002\000" +
    "\026\003\uffe3\004\uffe3\005\uffe3\014\uffe3\016\uffe3\020\uffe3" +
    "\021\uffe3\022\uffe3\025\uffe3\034\uffe3\001\002\000\024\003" +
    "\uffe0\004\uffe0\005\uffe0\014\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\025\uffe0\034\uffe0\001\002\000\024\003\uffe5\004\uffe5\005" +
    "\uffe5\014\uffe5\020\uffe5\021\uffe5\022\uffe5\025\uffe5\034\uffe5" +
    "\001\002\000\024\003\064\004\006\005\065\014\070\020" +
    "\062\021\060\022\047\025\063\034\uffbc\001\002\000\006" +
    "\020\uffdd\033\162\001\002\000\004\020\062\001\002\000" +
    "\024\003\uffe2\004\uffe2\005\uffe2\014\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\025\uffe2\034\uffe2\001\002\000\024\003\uffdf\004" +
    "\uffdf\005\uffdf\014\uffdf\020\uffdf\021\uffdf\022\uffdf\025\uffdf" +
    "\034\uffdf\001\002\000\004\034\165\001\002\000\024\003" +
    "\uffe1\004\uffe1\005\uffe1\014\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\025\uffe1\034\uffe1\001\002\000\024\003\uffde\004\uffde\005" +
    "\uffde\014\uffde\020\uffde\021\uffde\022\uffde\025\uffde\034\uffde" +
    "\001\002\000\024\003\uffee\004\uffee\005\uffee\014\uffee\020" +
    "\uffee\021\uffee\022\uffee\025\uffee\034\uffee\001\002\000\024" +
    "\003\uffef\004\uffef\005\uffef\014\uffef\020\uffef\021\uffef\022" +
    "\uffef\025\uffef\034\uffef\001\002\000\024\003\uffed\004\uffed" +
    "\005\uffed\014\uffed\020\uffed\021\uffed\022\uffed\025\uffed\034" +
    "\uffed\001\002\000\014\005\101\006\106\007\102\010\105" +
    "\031\100\001\002\000\012\011\113\012\111\013\112\032" +
    "\173\001\002\000\004\030\uffdb\001\002\000\004\033\175" +
    "\001\002\000\024\003\uffff\004\uffff\005\uffff\014\uffff\020" +
    "\uffff\021\uffff\022\uffff\025\uffff\034\uffff\001\002\000\004" +
    "\023\uffd7\001\002\000\006\015\202\030\uffbc\001\002\000" +
    "\004\030\ufff6\001\002\000\004\030\uffe6\001\002\000\014" +
    "\005\101\006\106\007\102\010\105\031\100\001\002\000" +
    "\012\011\113\012\111\013\112\030\ufff7\001\002\000\004" +
    "\002\001\001\002\000\004\030\ufffb\001\002\000\004\002" +
    "\000\001\002\000\004\034\210\001\002\000\004\002\ufffe" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\020\002\007\003\003\005\012\007\010\010" +
    "\013\011\011\036\006\001\001\000\040\004\205\007\071" +
    "\011\011\024\052\030\206\031\056\032\070\033\045\034" +
    "\060\036\066\037\050\040\054\041\053\046\051\047\047" +
    "\001\001\000\006\011\011\036\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\020\017\023\020\017\021" +
    "\022\023\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\016\007\010\010\013\011\011\036\006\001" +
    "\001\000\002\001\001\000\014\007\020\017\023\020\017" +
    "\021\022\023\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\007\071\011\011\022\065\024\052\030\055" +
    "\031\056\032\070\033\045\034\060\036\066\037\050\040" +
    "\054\041\053\046\051\047\047\001\001\000\002\001\001" +
    "\000\004\011\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\031\011\034\025\033" +
    "\026\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\036\027\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\034\025\041\001" +
    "\001\000\002\001\001\000\006\007\036\027\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\153\042\154\043\155\045\157\001\001\000\036\007\071" +
    "\011\011\024\052\030\151\031\056\032\070\033\045\034" +
    "\060\036\066\037\050\040\054\041\053\046\051\047\047" +
    "\001\001\000\002\001\001\000\036\007\071\011\011\024" +
    "\052\030\147\031\056\032\070\033\045\034\060\036\066" +
    "\037\050\040\054\041\053\046\051\047\047\001\001\000" +
    "\002\001\001\000\040\007\071\011\011\024\052\030\141" +
    "\031\056\032\070\033\045\034\060\035\142\036\066\037" +
    "\050\040\054\041\053\046\051\047\047\001\001\000\002" +
    "\001\001\000\012\012\103\013\134\016\076\024\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\073\050\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\103\013\102\016" +
    "\076\024\106\001\001\000\002\001\001\000\012\012\103" +
    "\013\125\016\076\024\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\114\016\076\024\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\012\103\013\121" +
    "\014\120\016\076\024\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\113\001\001\000\014\012\103" +
    "\013\121\014\123\016\076\024\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\103\013\131\016" +
    "\076\024\106\001\001\000\004\006\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\113\001\001\000" +
    "\012\012\103\013\136\016\076\024\106\001\001\000\004" +
    "\006\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\007\071\011" +
    "\011\024\052\030\162\031\056\032\070\033\045\034\060" +
    "\036\066\037\050\040\054\041\053\044\163\046\051\047" +
    "\047\001\001\000\002\001\001\000\010\037\160\040\054" +
    "\041\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\103\013\171\016\076\024\106\001\001\000\004\006\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\177\015\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\103\013" +
    "\202\016\076\024\106\001\001\000\004\006\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public void syntax_error(Symbol s){
    FrmPrincipal.notificarError("Error sintactico: "+s.value+" en linea: "+(s.left+1)+" y columna: "+(s.right+1));
}
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    FrmPrincipal.notificarError("No se pudo recuperar el error");
throw new Exception();
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


TablaSimbolos ts = new TablaSimbolos();

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LAMBDA ::= 
            {
              Symbols.LAMBDA RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LAMBDA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // M1 ::= LAMBDA 
            {
              Symbols.M RESULT =null;
		 RESULT = new Symbols.M(1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M1",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERADOR ::= Op_logico 
            {
              Symbols.OPERADOR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.OPERADOR(v,3,vleft,vright); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERADOR ::= Op_relacional 
            {
              Symbols.OPERADOR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.OPERADOR(v,2,vleft,vright); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERADOR ::= Op_aritmetico 
            {
              Symbols.OPERADOR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.OPERADOR(v,1,vleft,vright); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRS ::= EXPRP 
            {
              Symbols.EXPRS RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.EXPRS(v); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRS",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRS ::= EXPRP Coma EXPRS 
            {
              Symbols.EXPRS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Symbols.EXPRP v1 = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.EXPRS v2 = (Symbols.EXPRS)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.EXPRS(v1, v2); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRS",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LITERAL ::= Numero 
            {
              Symbols.LITERAL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.LITERAL(codigo.TablaSimbolos.Tipo.tInt, v,vleft,vright);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LITERAL ::= String 
            {
              Symbols.LITERAL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.LITERAL(codigo.TablaSimbolos.Tipo.tString, v,vleft,vright); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LITERAL ::= Op_booleano 
            {
              Symbols.LITERAL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.LITERAL(codigo.TablaSimbolos.Tipo.tBool,v,vleft,vright); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPR ::= LITERAL 
            {
              Symbols.EXPR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.LITERAL v = (Symbols.LITERAL)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.EXPR(v); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPR ::= Id 
            {
              Symbols.EXPR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.EXPR(v, ts,vleft,vright); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPR ::= CALL 
            {
              Symbols.EXPR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.CALL v = (Symbols.CALL)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.EXPR(v); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPR ::= A_par EXPRP C_par 
            {
              Symbols.EXPR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = new Symbols.EXPR(v); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRP ::= EXPR 
            {
              Symbols.EXPRP RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.EXPR v = (Symbols.EXPR)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.EXPRP(v); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRP",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRP ::= EXPRP OPERADOR EXPR 
            {
              Symbols.EXPRP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Symbols.EXPRP v1 = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.OPERADOR v2 = (Symbols.OPERADOR)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.EXPR v3 = (Symbols.EXPR)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.EXPRP(v1,v2,v3); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRP",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARAM ::= TYPE Id 
            {
              Symbols.PARAM RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.TYPE v1 = (Symbols.TYPE)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.PARAM(v1, v2); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PARAMSP ::= LAMBDA 
            {
              Symbols.PARAMSP RESULT =null;
		 RESULT = new Symbols.PARAMSP(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMSP",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PARAMSP ::= Coma PARAM PARAMSP 
            {
              Symbols.PARAMSP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.PARAM v1 = (Symbols.PARAM)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.PARAMSP v2 = (Symbols.PARAMSP)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.PARAMSP(v1, v2); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMSP",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PARAMS ::= LAMBDA 
            {
              Symbols.PARAMS RESULT =null;
		 RESULT = new Symbols.PARAMS(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PARAMS ::= PARAM PARAMSP 
            {
              Symbols.PARAMS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.PARAM v1 = (Symbols.PARAM)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.PARAMSP v2 = (Symbols.PARAMSP)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.PARAMS(v1,v2); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DEFINICION ::= Def Void 
            {
              Symbols.DEFINICION RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.DEFINICION(vleft,vright); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFINICION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DEFINICION ::= Def TYPE 
            {
              Symbols.DEFINICION RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.TYPE v = (Symbols.TYPE)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.DEFINICION(v);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFINICION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNC2 ::= INSTS C_llave 
            {
              Symbols.FUNC2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.INSTS v = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = new Symbols.FUNC2(v,ts); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC2",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FUNC1 ::= DEFINICION Id A_par PARAMS C_par A_llave 
            {
              Symbols.FUNC1 RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Symbols.DEFINICION v1 = (Symbols.DEFINICION)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Symbols.PARAMS v3 = (Symbols.PARAMS)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 RESULT = new Symbols.FUNC1(v1, v2, v3, ts); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC1",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FUNC ::= FUNC1 FUNC2 
            {
              Symbols.FUNC RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.FUNC1 v1 = (Symbols.FUNC1)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.FUNC2 v2 = (Symbols.FUNC2)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.FUNC(v1, v2); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FUNCS ::= LAMBDA 
            {
              Symbols.FUNCS RESULT =null;
		 RESULT = new Symbols.FUNCS(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUNCS ::= FUNC FUNCS 
            {
              Symbols.FUNCS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.FUNC v1 = (Symbols.FUNC)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.FUNCS v2 = (Symbols.FUNCS)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.FUNCS(v1, v2); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RET ::= Return EXPRP 
            {
              Symbols.RET RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.RET(v); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RET",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CALL ::= Id A_par C_par 
            {
              Symbols.CALL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 RESULT = new Symbols.CALL(v, ts,vleft,vright); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CALL ::= Id A_par EXPRS C_par 
            {
              Symbols.CALL RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.EXPRS v2 = (Symbols.EXPRS)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = new Symbols.CALL(v1, v2, ts,v1left,v1right);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IO ::= Out A_par EXPRP C_par 
            {
              Symbols.IO RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = new Symbols.IO(v); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IO",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IO ::= In A_par Id C_par 
            {
              Symbols.IO RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = new Symbols.IO(v, ts,vleft,vright); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IO",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ELS3 ::= Else 
            {
              Symbols.ELS3 RESULT =null;
		 RESULT = new Symbols.ELS3(ts); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELS3",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ELS2 ::= INSTS C_llave 
            {
              Symbols.ELS2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.INSTS v = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = new Symbols.ELS2(v, ts); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELS2",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ELS1 ::= Else A_llave 
            {
              Symbols.ELS1 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = new Symbols.ELS1(ts,vleft); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELS1",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ELS ::= LAMBDA 
            {
              Symbols.ELS RESULT =null;
		 RESULT = new Symbols.ELS(ts); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELS",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ELS ::= ELS1 ELS2 
            {
              Symbols.ELS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.ELS1 v1 = (Symbols.ELS1)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.ELS2 v2 = (Symbols.ELS2)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.ELS(v1, v2); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELS",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ELS ::= ELS3 CND 
            {
              Symbols.ELS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.ELS3 v1 = (Symbols.ELS3)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.CND v2 = (Symbols.CND)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.ELS(v1, v2, ts); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELS",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CND2 ::= CND1 INSTS C_llave 
            {
              Symbols.CND2 RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Symbols.CND1 v1 = (Symbols.CND1)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.INSTS v2 = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = new Symbols.CND2(v1, v2, ts); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CND2",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CND1 ::= If A_par EXPRP C_par A_llave 
            {
              Symbols.CND1 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 RESULT = new Symbols.CND1(v, ts); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CND1",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CND ::= CND2 ELS 
            {
              Symbols.CND RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.CND2 v1 = (Symbols.CND2)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.ELS v2 = (Symbols.ELS)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.CND(v1, v2); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CND",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DCL ::= TYPE Id ASIGNACION 
            {
              Symbols.DCL RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Symbols.TYPE v1 = (Symbols.TYPE)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.ASIGNACION v3 = (Symbols.ASIGNACION)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.DCL(v1,v2, v3, ts); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DCL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // WHL2 ::= INSTS C_llave 
            {
              Symbols.WHL2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.INSTS v = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = new Symbols.WHL2(v, ts);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHL2",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // WHL1 ::= While M1 A_par EXPRP C_par A_llave 
            {
              Symbols.WHL1 RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Symbols.M m = (Symbols.M)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 RESULT = new Symbols.WHL1(v, m, ts);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHL1",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // WHL ::= WHL1 WHL2 
            {
              Symbols.WHL RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.WHL1 v1 = (Symbols.WHL1)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.WHL2 v2 = (Symbols.WHL2)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.WHL(v1, v2); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHL",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIG ::= Id Igual EXPRP 
            {
              Symbols.ASIG RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.EXPRP v2 = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.ASIG(v1,v2,ts); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INST ::= error C_llave 
            {
              Symbols.INST RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INST ::= error PuntoYComa 
            {
              Symbols.INST RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INST ::= RET PuntoYComa 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.RET v = (Symbols.RET)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = new Symbols.INST(v); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INST ::= CALL PuntoYComa 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.CALL v = (Symbols.CALL)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = new Symbols.INST(v,true); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INST ::= IO PuntoYComa 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.IO v = (Symbols.IO)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = new Symbols.INST(v,true); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INST ::= CND 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.CND v = (Symbols.CND)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.INST(v); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INST ::= DCL PuntoYComa 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.DCL v = (Symbols.DCL)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = new Symbols.INST(v,true); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INST ::= WHL 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.WHL v = (Symbols.WHL)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.INST(v); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INST ::= ASIG PuntoYComa 
            {
              Symbols.INST RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.ASIG v = (Symbols.ASIG)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = new Symbols.INST(v,true); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INST",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTS ::= LAMBDA 
            {
              Symbols.INSTS RESULT =null;
		 RESULT = new Symbols.INSTS(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTS",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTS ::= INST INSTS 
            {
              Symbols.INSTS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.INST v1 = (Symbols.INST)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.INSTS v2 = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.INSTS(v1, v2); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTS",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ASIGNACION ::= LAMBDA 
            {
              Symbols.ASIGNACION RESULT =null;
		 RESULT = new Symbols.ASIGNACION(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ASIGNACION ::= Igual EXPRP 
            {
              Symbols.ASIGNACION RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.EXPRP v = (Symbols.EXPRP)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.ASIGNACION(v); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TYPE ::= Tipo 
            {
              Symbols.TYPE RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.TYPE(v,vleft,vright); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECL ::= error 
            {
              Symbols.DECL RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECL ::= DCL 
            {
              Symbols.DECL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.DCL v = (Symbols.DCL)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.DECL(v,false,null); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECL ::= Const DCL 
            {
              Symbols.DECL RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.DCL v = (Symbols.DCL)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.DECL(v, true, ts); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLS ::= LAMBDA 
            {
              Symbols.DECLS RESULT =null;
		 RESULT = new Symbols.DECLS(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLS ::= DECL PuntoYComa DECLS 
            {
              Symbols.DECLS RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Symbols.DECL v1 = (Symbols.DECL)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.DECLS v2 = (Symbols.DECLS)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.DECLS(v1, v2); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // P2 ::= INSTS C_llave 
            {
              Symbols.P2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.INSTS v = (Symbols.INSTS)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = new Symbols.P2(v, ts); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P2",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P1 ::= DECLS FUNCS Main A_llave 
            {
              Symbols.P1 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Symbols.DECLS v = (Symbols.DECLS)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Symbols.FUNCS v2 = (Symbols.FUNCS)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = new Symbols.P1(v,v2,ts,mleft); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P1",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // P ::= P1 P2 
            {
              Symbols.P RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.P1 v1 = (Symbols.P1)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Symbols.P2 v2 = (Symbols.P2)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = new Symbols.P(v1, v2,ts); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= P EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Symbols.P start_val = (Symbols.P)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

