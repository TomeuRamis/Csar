package codigo;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

init with {:
    TablaSimbolos ts = new TablaSimbolos();
    

:}

terminal While, Igual, Id, Else, Numero, Tipo, Const, If, In,  Out, Main, Def, Return, Coma, Void,
    PuntoYComa, A_par, C_par, A_llave, C_llave, Op_aritmetico, Op_logico, Op_relacional, Op_booleano, String, ERROR;
non terminal P,  DECLS, DECL, TYPE, ASIGNACION, INSTS, INST, ASIG, WHL, DCL, CND, ELS, IO, CALL, 
    RET, FUNCS, FUNC, DEFINICION, PARAMS, PARAMSP, PARAM, EXPRP, EXPR, EXPRS, OPERADOR, LAMBDA, LITERAL;

start with P;

P ::=
    DECLS Main:v1 A_llave INSTS C_llave FUNCS {: RESULT = new NoTerminales.OPERADOR(v1); :}
;
DECLS ::= 
    DECL PuntoYComa DECLS | /*{:  :}*/
    LAMBDA /*{:  :}*/
;
DECL ::=
    Const TYPE Id ASIGNACION | /*{:  :}*/
    TYPE Id ASIGNACION  /*{:  :}*/
;
TYPE ::=
    Tipo /*{:  :}*/
;
ASIGNACION ::=
    Igual EXPRP | /*{:  :}*/
    LAMBDA /*{:  :}*/
;
INSTS ::=
    INST PuntoYComa INSTS | /*{:  :}*/
    LAMBDA {: :}
;
INST ::=
    ASIG | /*{:  :}*/
    WHL | /*{:  :}*/
    DCL | /*{:  :}*/
    CND | /*{:  :}*/
    IO | /*{:  :}*/
    CALL | /*{:  :}*/
    RET /*{:  :}*/
;
ASIG ::=
    Id Igual EXPRP /*{:  :}*/
;
WHL ::=
    While A_par EXPRP C_par A_llave INSTS C_llave /*{:  :}*/
;

DCL ::= 
    TYPE Id ASIGNACION /*{:  :}*/
;
CND ::= 
    If A_par EXPRP C_par A_llave INSTS C_llave ELS /*{:  :}*/
;
ELS ::=
    Else CND | /*{:  :}*/
    Else A_llave INSTS C_llave | /*{:  :}*/
    LAMBDA /*{:  :}*/
;
IO ::= 
    In A_par Id C_par | /*{:  :}*/
    Out A_par EXPRP C_par /*{:  :}*/
;
CALL ::=  
    Id A_par EXPRS C_par | /*{:  :}*/
    Id A_par C_par /*{:  :}*/
;
RET ::= 
    Return EXPRP /*{:  :}*/
;
FUNCS ::= 
    FUNC FUNCS | /*{:  :}*/
    LAMBDA /*{:  :}*/
;
FUNC ::= 
    DEFINICION Id A_par PARAMS C_par A_llave INSTS C_llave /*{:  :}*/
;
DEFINICION ::= 
    Def TYPE |  /*{:  :}*/
    Def Void /*{:  :}*/
;
PARAMS ::= 
    PARAM PARAMSP |  /*{:  :}*/
    LAMBDA /*{:  :}*/
;
PARAMSP ::= 
    Coma PARAM PARAMSP | /*{:  :}*/
    LAMBDA /*{:  :}*/
;
PARAM ::= 
    TYPE Id /*{:  :}*/
;
EXPRP ::=  
    EXPRP OPERADOR EXPR | /*{:  :}*/
    EXPR /*{:  :}*/
;
EXPR ::= 
    CALL | /*{:  :}*/
    Id | /*{:  :}*/
    LITERAL /*{:  :}*/
;

LITERAL ::= 
    Op_booleano |  /*{:  :}*/
    String | /*{:  :}*/
    Numero /*{:  :}*/
;
EXPRS ::= 
    EXPR Coma EXPRS | /*{:  :}*/
    EXPR /*{:  :}*/
;
OPERADOR ::=
    Op_aritmetico | {: //RESULT = new OPERADOR(v2.type, v2.value); :}
    Op_relacional | 
    Op_logico 
;
LAMBDA ::= /* empty */;