package codigo;

import java_cup.runtime.Symbol;
action code {:
    TablaSimbolos ts = new TablaSimbolos();
:}
parser code
{:
    public void syntax_error(Symbol s){
        FrmPrincipal.notificarError("Error sintactico: "+s.value+" en linea: "+(s.left+1)+" y columna: "+(s.right+1));
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        //FrmPrincipal.notificarError("Error sintactico: "+s.value+" en linea: "+(s.left+1)+" y columna: "+(s.right+1)+" No se pudo recuperar");
        FrmPrincipal.notificarError("No se pudo recuperar el error");
    }
:};

terminal String Tipo, Id, Numero, Op_booleano, String, Op_aritmetico, Op_logico, Op_relacional;
terminal While, Igual, Else,  Const, If, In,  Out, Main, Def, Return, Coma, Void,
    PuntoYComa, A_par, C_par, A_llave, C_llave;

non terminal Symbols.P P;
non terminal Symbols.P1 P1;
non terminal Symbols.P2 P2;
non terminal Symbols.DECLS DECLS;
non terminal Symbols.OPERADOR OPERADOR;
non terminal Symbols.LAMBDA LAMBDA;
non terminal Symbols.DECL DECL;
non terminal Symbols.TYPE TYPE;
non terminal Symbols.EXPR EXPR;
non terminal Symbols.EXPRP EXPRP;
non terminal Symbols.EXPRS EXPRS;
non terminal Symbols.ASIGNACION ASIGNACION;
non terminal Symbols.LITERAL LITERAL;
non terminal Symbols.DEFINICION DEFINICION;
non terminal Symbols.FUNC FUNC;
non terminal Symbols.FUNC1 FUNC1;
non terminal Symbols.FUNC2 FUNC2;
non terminal Symbols.FUNCS FUNCS;
non terminal Symbols.CALL CALL;
non terminal Symbols.PARAM PARAM;
non terminal Symbols.PARAMS PARAMS;
non terminal Symbols.PARAMSP PARAMSP;
non terminal Symbols.INSTS INSTS;
non terminal Symbols.INST INST;
non terminal Symbols.ASIG ASIG;
non terminal Symbols.WHL WHL;
non terminal Symbols.WHL1 WHL1;
non terminal Symbols.WHL2 WHL2;
non terminal Symbols.DCL DCL;
non terminal Symbols.CND CND;
non terminal Symbols.CND1 CND1;
non terminal Symbols.CND2 CND2;
non terminal Symbols.ELS ELS;
non terminal Symbols.ELS1 ELS1;
non terminal Symbols.ELS2 ELS2;
non terminal Symbols.ELS3 ELS3;
non terminal Symbols.IO IO;
non terminal Symbols.RET RET;

start with P;

P ::=
    P1:v1 P2:v2                     {: RESULT = new Symbols.P(v1, v2,ts); :}
;
P1 ::=
    DECLS:v FUNCS:v2 Main A_llave    {: RESULT = new Symbols.P1(v,v2, ts); :}
;
P2 ::=
    INSTS:v C_llave                {: RESULT = new Symbols.P2(v, ts); :}
;
DECLS ::= 
    DECL:v1 PuntoYComa:v DECLS:v2   {: RESULT = new Symbols.DECLS(v1, v2); :} |
    LAMBDA                          {: RESULT = new Symbols.DECLS(); :}
;
DECL ::=
    Const DCL:v         {: RESULT = new Symbols.DECL(v, true, ts); :} |
    DCL:v               {: RESULT = new Symbols.DECL(v,false,null); :} |
    error
;
TYPE ::=
    Tipo:v              {: RESULT = new Symbols.TYPE(v,vleft,vright); :}
;
ASIGNACION ::=
    Igual EXPRP:v       {: RESULT = new Symbols.ASIGNACION(v); :} |
    LAMBDA              {: RESULT = new Symbols.ASIGNACION(); :}
;
INSTS ::=
    INST:v1 INSTS:v2    {: RESULT = new Symbols.INSTS(v1, v2); :} |
    LAMBDA              {: RESULT = new Symbols.INSTS(); :} 
;
INST ::=
    ASIG:v PuntoYComa     {: RESULT = new Symbols.INST(v,true); :} |
    WHL:v                 {: RESULT = new Symbols.INST(v); :} |
    DCL:v PuntoYComa      {: RESULT = new Symbols.INST(v,true); :} |
    CND:v                 {: RESULT = new Symbols.INST(v); :} |
    IO:v PuntoYComa       {: RESULT = new Symbols.INST(v,true); :} |
    CALL:v PuntoYComa     {: RESULT = new Symbols.INST(v,true); :} |
    RET:v PuntoYComa      {: RESULT = new Symbols.INST(v); :} |
    error PuntoYComa    |
    error C_llave
;
ASIG ::=
    Id:v1 Igual EXPRP:v2            {: RESULT = new Symbols.ASIG(v1,v2,ts); :}
;
WHL ::=
    WHL1:v1 WHL2:v2                       {: RESULT = new Symbols.WHL(v1, v2); :}
;
WHL1 ::=
    While A_par EXPRP:v C_par A_llave   {: RESULT = new Symbols.WHL1(v, ts);  :}
;
WHL2 ::=
    INSTS:v C_llave                 {: RESULT = new Symbols.WHL2(v, ts);  :}
;

DCL ::= 
    TYPE:v1 Id:v2 ASIGNACION:v3     {: RESULT = new Symbols.DCL(v1,v2, v3, ts); :}
;
CND ::= 
    CND1:v1 CND2:v2                 {: RESULT = new Symbols.CND(v1, v2); :}
;
CND1 ::=
    If A_par EXPRP:v C_par A_llave  {: RESULT = new Symbols.CND1(v, ts); :}
;
CND2 ::=
    INSTS:v1 C_llave ELS:v2         {: RESULT = new Symbols.CND2(v1, v2, ts); :}
;
ELS ::=
    ELS3:v1 CND:v2                  {: RESULT = new Symbols.ELS(v1, v2, ts); :} |
    ELS1:v1 ELS2:v2                 {: RESULT = new Symbols.ELS(v1, v2); :} |
    LAMBDA                          {: RESULT = new Symbols.ELS(ts); :}
;
ELS1 ::= 
    Else A_llave                    {: RESULT = new Symbols.ELS1(ts); :}
;
ELS2 ::=
    INSTS:v C_llave                 {: RESULT = new Symbols.ELS2(v, ts); :} 
;
ELS3 ::=
    Else                            {: RESULT = new Symbols.ELS3(ts); :}
;
IO ::= 
    In A_par Id:v C_par             {: RESULT = new Symbols.IO(v, ts,vleft,vright); :} |
    Out A_par EXPRP:v C_par         {: RESULT = new Symbols.IO(v); :}
;
CALL ::=  
    Id:v1 A_par EXPRS:v2 C_par      {: RESULT = new Symbols.CALL(v1, v2, ts,v1left,v1right);  :} |
    Id:v A_par C_par                {: RESULT = new Symbols.CALL(v, ts,vleft,vright); :}
;
RET ::= 
    Return EXPRP:v                  {: RESULT = new Symbols.RET(v); :}
;
FUNCS ::= 
    FUNC:v1 FUNCS:v2                {: RESULT = new Symbols.FUNCS(v1, v2); :} |
    LAMBDA                          {: RESULT = new Symbols.FUNCS(); :}
;
FUNC ::= 
    FUNC1:v1 FUNC2:v2               {: RESULT = new Symbols.FUNC(v1, v2); :}
;
FUNC1 ::=
    DEFINICION:v1 Id:v2 A_par PARAMS:v3 C_par A_llave {: RESULT = new Symbols.FUNC1(v1, v2, v3, ts); :}
;
FUNC2 ::=
    INSTS:v C_llave                 {: RESULT = new Symbols.FUNC2(v,ts); :}
;
DEFINICION ::= 
    Def TYPE:v                      {: RESULT = new Symbols.DEFINICION(v);  :} |
    Def Void:v                        {: RESULT = new Symbols.DEFINICION(vleft,vright); :}
;
PARAMS ::= 
    PARAM:v1 PARAMSP:v2             {: RESULT = new Symbols.PARAMS(v1,v2); :} |
    LAMBDA                          {: RESULT = new Symbols.PARAMS(); :}
;
PARAMSP ::= 
    Coma PARAM:v1 PARAMSP:v2        {: RESULT = new Symbols.PARAMSP(v1, v2); :} |
    LAMBDA                          {: RESULT = new Symbols.PARAMSP(); :}
;
PARAM ::= 
    TYPE:v1 Id:v2                   {: RESULT = new Symbols.PARAM(v1, v2); :}
;
EXPRP ::=  
    EXPRP:v1 OPERADOR:v2 EXPR:v3    {: RESULT = new Symbols.EXPRP(v1,v2,v3); :} |
    EXPR:v                          {: RESULT = new Symbols.EXPRP(v); :}
;
EXPR ::= 
    A_par EXPRP:v C_par             {: RESULT = new Symbols.EXPR(v); :} |
    CALL:v                          {: RESULT = new Symbols.EXPR(v); :} |
    Id:v                            {: RESULT = new Symbols.EXPR(v, ts,vleft,vright); :} |
    LITERAL:v                       {: RESULT = new Symbols.EXPR(v); :}
;

LITERAL ::= 
    Op_booleano:v                     {: RESULT = new Symbols.LITERAL(codigo.TablaSimbolos.Tipo.tBool,v,vleft,vright); :} |
    String:v                          {: RESULT = new Symbols.LITERAL(codigo.TablaSimbolos.Tipo.tString, v,vleft,vright); :} |
    Numero:v                          {: RESULT = new Symbols.LITERAL(codigo.TablaSimbolos.Tipo.tInt, v,vleft,vright);  :}
;
EXPRS ::= 
    EXPRP:v1 Coma EXPRS:v2          {: RESULT = new Symbols.EXPRS(v1, v2); :} |
    EXPRP:v                         {: RESULT = new Symbols.EXPRS(v); :}
;
OPERADOR ::=
    Op_aritmetico:v                 {: RESULT = new Symbols.OPERADOR(v,1,vleft,vright); :}| 
    Op_relacional:v                 {: RESULT = new Symbols.OPERADOR(v,2,vleft,vright); :}| 
    Op_logico:v                     {: RESULT = new Symbols.OPERADOR(v,3,vleft,vright); :}
;
LAMBDA ::= /* empty */;

